{
  parserClass="com.github.joshflash.ponylangplugin.parser.PonyParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Pony"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.joshflash.ponylangplugin.language.psi"
  psiImplPackage="com.github.joshflash.ponylangplugin.language.psi.impl"

  elementTypeHolderClass="com.github.joshflash.ponylangplugin.language.psi.PonyTypes"
  elementTypeClass="com.github.joshflash.ponylangplugin.language.psi.PonyElementType"
  tokenTypeClass="com.github.joshflash.ponylangplugin.language.psi.PonyTokenType"

  tokens = [
    ASSIGNMENT="="
    ARROW="=>"
    FAT_ARROW="<-"
    COLON=":"
    SEMICOLON=";"
    COMMA=","
    DOT="."
    PLUS="+"
    MINUS="-"
    MULT="*"
    DIV="/"
    EQUALS="=="
    NOT_EQUALS="!="
    LESS_THAN="<"
    GREATER_THAN=">"
    LESS_EQUAL="<="
    GREATER_EQUAL=">="
    LEFT_PAREN="("
    RIGHT_PAREN=")"
    LEFT_BRACKET="["
    RIGHT_BRACKET="]"
    KW_USE="use"
    KW_ACTOR="actor"
    KW_CLASS="class"
    KW_TRAIT="trait"
    KW_PRIMITIVE="primitive"
    KW_FUN="fun"
    KW_BE="be"
    KW_NEW="new"
    KW_LET="let"
    KW_VAR="var"
    KW_EMBED="embed"
    KW_IS="is"
    KW_IF="if"
    KW_TRY="try"
    KW_ELSE="else"
    KW_END="end"
    KW_FOR="for"
    KW_IN="in"
    KW_DO="do"
    KW_WITH="with"
    KW_MATCH="match"
    KW_RECOVER="recover"
    KW_CONSUME="consume"
    KW_ISO="iso"
    KW_REF="ref"
    KW_VAL="val"

    space="regexp:\\s+"
    identifier="regexp:[a-zA-Z_][a-zA-Z0-9_]*"
    number="regexp:[0-9]+"
    string="regexp:('([^'\\]|\\\\.)*'|\"([^\"\\]|\\\\.)*\")"
    line_comment="regexp://.*"
    block_comment="regexp:/\\*([^*]|\\*+[^*/])*\\*/"
  ]
}

program ::= (use_statement | declaration | statement)*;

use_statement ::= KW_USE string;

qualified_identifier ::= identifier (DOT identifier)*;

declaration ::= actor_declaration | class_declaration | trait_declaration | primitive_declaration;

actor_declaration ::= KW_ACTOR identifier actor_body;
actor_body ::= (field_declaration | method_declaration | behavior_declaration | constructor)*;

class_declaration ::= KW_CLASS identifier (KW_IS identifier)? class_body;
class_body ::= (field_declaration | method_declaration | constructor)*;

trait_declaration ::= KW_TRAIT identifier trait_body;
trait_body ::= method_declaration*;

primitive_declaration ::= KW_PRIMITIVE identifier primitive_body;
primitive_body ::= method_declaration*;

field_declaration ::= (KW_VAR | KW_LET | KW_EMBED) identifier (COLON type)? (ASSIGNMENT expression)?;
annotation ::= "@" identifier;

constructor ::= KW_NEW identifier parameter_list ARROW block;
method_declaration ::= (annotation*)? KW_FUN (KW_REF | KW_ISO | KW_VAL)? identifier parameter_list (COLON type)? ARROW block;
behavior_declaration ::= KW_BE identifier parameter_list (COLON type)? ARROW block;

parameter_list ::= LEFT_PAREN (parameter (COMMA parameter)*)? RIGHT_PAREN;
parameter ::= identifier COLON type;

block ::= statement*;
statement ::= field_declaration
            | assignment_statement
            | expression_statement
            | if_statement
            | for_statement
            | try_statement
            | match_statement;

assignment_statement ::= identifier ASSIGNMENT expression;

expression_statement ::= expression
            | KW_CONSUME expression
            | LEFT_PAREN expression RIGHT_PAREN;

expression ::= primary
             | function_call
             | method_call
             | KW_RECOVER block KW_END
             | tuple;

tuple ::= LEFT_PAREN expression (COMMA expression)* RIGHT_PAREN;

primary ::= qualified_identifier | literal | LEFT_PAREN expression RIGHT_PAREN;

literal ::= number | string | "true" | "false" | "None";

function_call ::= qualified_identifier LEFT_PAREN argument_list? RIGHT_PAREN;
method_call ::= primary DOT identifier LEFT_PAREN argument_list? RIGHT_PAREN;

argument_list ::= expression (COMMA expression)*;

type ::= identifier type_arguments?;
type_arguments ::= LEFT_BRACKET type (COMMA type)* RIGHT_BRACKET;

if_statement ::= KW_IF expression KW_THEN block (KW_ELSE block)? KW_END;

for_statement ::= KW_FOR identifier KW_IN expression KW_DO block KW_END;

try_statement ::= KW_TRY block (KW_ELSE block)? KW_END;

match_statement ::= KW_MATCH expression KW_WITH match_cases;
match_cases ::= match_case+;
match_case ::= pattern ARROW block;

pattern ::= identifier | "_";
