//noinspection SpellCheckingInspectionForFile
{
  parserClass="com.github.joshflash.ponylangplugin.parser.PonyParser"
  parserUtilClass="com.github.joshflash.ponylangplugin.parser.PonyParserUtil"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Pony"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.joshflash.ponylangplugin.language.psi"
  psiImplPackage="com.github.joshflash.ponylangplugin.language.psi.impl"

  elementTypeHolderClass="com.github.joshflash.ponylangplugin.language.psi.PonyTypes"
  elementTypeClass="com.github.joshflash.ponylangplugin.language.psi.PonyElementType"
  tokenTypeClass="com.github.joshflash.ponylangplugin.language.psi.PonyTokenType"

  tokens = [
  // keywords
    USE="use"
    TYPEDEF="type"
    INTERFACE="interface"
    TRAIT="trait"
    PRIMITIVE="primitive"
    STRUCT="struct"
    CLASS="class"
    ACTOR="actor"
    OBJECT="object"
    FUN="fun"
    BE="be"
    NEW="new"
    LET="let"
    VAR="var"
    EMBED="embed"
    THIS="this"
    IS="is"
    AS="as"
    ISNT="isnt"
    IF="if"
    ELSEIF="elseif"
    THEN="then"
    TRY="try"
    ELSE="else"
    END="end"
    FOR="for"
    IN="in"
    DO="do"
    WHERE="where"
    WHILE="while"
    WITH="with"
    MATCH="match"
    RECOVER="recover"
    CONSUME="consume"
    IFDEF="ifdef"
    IFTYPE="iftype"
    REPEAT="repeat"
    UNTIL="until"
    ISO="iso"
    REF="ref"
    TRN="trn"
    VAL="val"
    BOX="box"
    TAG="tag"
    RETURN="return"
    BREAK="break"
    CONTINUE="continue"
    ERROR="error"
    COMP_INT="compile_intrinsic"
    COMP_ERR="compile_error"
    SOURCELOC="__loc"
    ADDRESSOF="addressof"
    DIGESTOF="digestof"
  // symbols
    EQUALS="="
    ARROW="=>"
    TYPE_ARROW="->"
    COLON=":"
    SEMI=";"
    COMMA=","
    DOT="."
    LP="("
    RP=")"
    LBK="["
    RBK="]"
    LBC="{"
    RBC="}"
    RCVR="@{"
    AT="@"
    QM="?"
    CARET="^"
    BANG="!"
    CHAIN=".>"
    TILDE="~"
    PIPE="|"
    AMP="&"
    HASH="#"
    ELIPSIS="..."
    SCORE="_"
  // operators
    ISA="<:"
    AND="and"
    OR="or"
    NOT="not"
    XOR="xor"
    ADD="+"
    SUB="-"
    MUL="*"
    DIV="/"
    REM="%"
    MOD="%%"
    SHL="<<"
    SHR=">>"
    EQ="=="
    NEQ="!="
    LT="<"
    GT=">"
    LEQ="<="
    GEQ=">="
    ADD_UNSAFE="+~"
    SUB_UNSAFE="-~"
    MUL_UNSAFE="*~"
    DIV_UNSAFE="/~"
    REM_UNSAFE="%~"
    MOD_UNSAFE="%%~"
    SHL_UNSAFE="<<~"
    SHR_UNSAFE=">>~"
    EQ_UNSAFE="==~"
    NEQ_UNSAFE="!=~"
    LT_UNSAFE="<~"
    GT_UNSAFE=">~"
    LEQ_UNSAFE="<=~"
    GEQ_UNSAFE=">=~"
    ADD_PARTIAL="+?"
    SUB_PARTIAL="-?"
    MUL_PARTIAL="*?"
    DIV_PARTIAL="/?"
    REM_PARTIAL="%?"
    MOD_PARTIAL="%%?"
  // lexemes
    true="true"
    false="false"
    float="regexp:([0-9]([0-9]|_)*(\.[0-9]([0-9]|_)*)?([eE][+-]?[0-9]([0-9]|_)*)?)"
    int="regexp:(0x[0-9a-fA-F]([0-9a-fA-F]|_)*)|(0b[01]([01]|_)*)"
    type_id="regexp:_?[A-Z][a-zA-Z0-9_]*"
    id="regexp:(_[a-z]|[a-z])[a-zA-Z0-9_]*'*"
    tuple_id="regexp:_[1-9][0-9]?"
    doc_string="regexp:(\"\"\")([^\"]|\"\"?[^\"])*(\"\"\")?"
    string="regexp:(\"(\\[abefnrtuvx0'?\"\\]|[^\"\\])*\")"
    char="regexp:('(\\[abefnrtv0'?\\]|[^'\\])')"
    gencap="regexp:#(read|send|share|alias|any)"
    line_comment="regexp://.*"
    block_comment="regexp:/\*([^*]|\*+[^*/])*(\*+/)?"
  ]
}

module ::= [doc_string] usestmt* class_def* ;

usestmt ::= USE [id EQUALS] (string | use_ffi) [IF flaginfix] ;

use_ffi ::= AT id_ffi typeargs LP [params] RP [QM] ;

class_def ::= declaration [annotatedids] [AT] [cap] type_ref [typeparams] [IS type] [doc_string] members ;

type_ref ::= type_id ;

member_ref ::= id ;

id_ffi ::= SCORE* (id | type_id | string) ;

id_var ::= id | type_id | SCORE ;

declaration ::= (TYPEDEF | INTERFACE | TRAIT | PRIMITIVE | STRUCT | CLASS | ACTOR) ;

members ::= field* method* ;

field ::= binding member_ref COLON type [EQUALS infix] [doc_string] ;

binding ::= (VAR | LET | EMBED) ;

method ::= (FUN | BE | NEW) [annotatedids] [cap | AT] member_ref [typeparams] LP [params] RP [COLON type] [QM] [ARROW] [doc_string] [rawseq] ;

annotatedrawseq ::= [annotatedids] (exprseq | jump) ;

rawseq ::= exprseq | jump ;

exprseq ::= assignment [semiexpr | nosemi] ;

nosemi ::= jump | nextexprseq ;

nextexprseq ::= assignment [semiexpr | nosemi] ;

semiexpr ::= SEMI (exprseq | jump) ;

jump ::= (RETURN | BREAK | CONTINUE | ERROR | COMP_INT | COMP_ERR) [rawseq] ;

assignment ::= infix [EQUALS assignment] ;

infix ::= term infixop* ;

infixop ::= binop | isop | AS type ;

isop ::= (IS | ISNT) term ;

safeop ::=
    AND | OR  | XOR | ADD | SUB | MUL
  | DIV | REM | MOD | SHL | SHR | EQ
  | NEQ | LT  | LEQ | GEQ | GT ;

unsafeop ::=
    ADD_UNSAFE | SUB_UNSAFE | MUL_UNSAFE
  | DIV_UNSAFE | REM_UNSAFE | MOD_UNSAFE
  | SHL_UNSAFE | SHR_UNSAFE | EQ_UNSAFE
  | NEQ_UNSAFE | LT_UNSAFE  | LEQ_UNSAFE
  | GT_UNSAFE  | GEQ_UNSAFE ;

partialop ::=
    ADD_PARTIAL | SUB_PARTIAL | MUL_PARTIAL
  | DIV_PARTIAL | REM_PARTIAL | MOD_PARTIAL ;

binop ::=
   (safeop | unsafeop | partialop) [QM] term ;

term ::=
    construct
  | pattern ;

construct ::=
    ifblock
  | whileloop
  | forloop
  | matchblock
  | tryblock
  | ifdefblock
  | controlblock
  | CONSUME [cap] term
  | HASH postfix ;

controlblock ::=
  | IFTYPE [annotatedids] istype [eliftype | (ELSE annotatedrawseq)] END
  | REPEAT [annotatedids] rawseq UNTIL annotatedrawseq [ELSE annotatedrawseq] END
  | WITH [annotatedids] withelem (COMMA withelem)* DO rawseq END
  | RECOVER [annotatedids] [cap] rawseq END ;

ifdefblock ::= IFDEF [annotatedids] flaginfix THEN rawseq [elifdef | (ELSE annotatedrawseq)] END

flaginfix ::= flagterm flaginfixop* ;

flaginfixop ::=
      (safeop | unsafeop | partialop) [QM] flagterm
    | (IS | ISNT) flagterm
    |  AS type ;

flagterm ::=
      construct
    | binding pattern_ref [COLON type]
    | flagparampattern ;

flagparampattern ::=
    (NOT | ADDRESSOF | SUB | SUB_UNSAFE | DIGESTOF) flagparampattern
   | flagatom postfixelem* ;

flagatom ::=
    id
  | literal
  | THIS
  | object_def
  | fun_def
  | recover_def
  | AT id_ffi [typeargs] LP [positional] [named] RP [QM]
  | SOURCELOC
  | ifblock
  | whileloop
  | forloop
  | LP rawseq [tuple] RP
  | LBK [AS type COLON] [rawseq] RBK ;

withelem ::= idseq EQUALS rawseq ;

caseexpr ::=
    PIPE [annotatedids] [casepattern] [IF rawseq] [ARROW rawseq] ;

eliftype ::=
    ELSEIF [annotatedids] istype [eliftype | (ELSE annotatedrawseq)] ;

istype ::= type ISA type THEN rawseq ;

elifdef ::=
    ELSEIF [annotatedids] infix THEN rawseq [elifdef | (ELSE annotatedrawseq)] ;

elif ::=
    ELSEIF [annotatedids] rawseq THEN rawseq [elif | (ELSE annotatedrawseq)] ;

idseq ::=
    pattern_ref
  | LP idseq_in_seq (COMMA idseq_in_seq)* RP ;

idseq_in_seq ::=
    pattern_ref
  | LP idseq_in_seq (COMMA idseq_in_seq)* RP ;

casepattern ::=
    binding pattern_ref [COLON type]
  | caseparampattern ;

pattern ::=
    binding pattern_ref [COLON type]
  | parampattern ;

pattern_ref ::= (id | SCORE) ;

caseparampattern ::=
    (NOT | ADDRESSOF | SUB | SUB_UNSAFE | DIGESTOF) caseparampattern
  | casepostfix ;

parampattern ::=
    (NOT | ADDRESSOF | SUB | SUB_UNSAFE | DIGESTOF) parampattern
  | postfix ;

casepostfix ::= atom postfixelem* ;

postfix ::= (atom | ifblock) postfixelem* ;

postfixelem ::= dot_id | tilde_id | chain_id | dot_typeref | typeargs | call ;

call ::= LP [positional] [named] RP [QM] ;

chain_id ::= CHAIN member_ref ;

tilde_id ::= TILDE member_ref ;

dot_id ::= DOT (member_ref | tuple_id) ;

dot_typeref ::= DOT type_ref ;

atom ::=
    particle
  | whileloop
  | forloop
  | LP rawseq [tuple] RP
  | LBK [AS type COLON] [rawseq] RBK ;

particle ::=
    id_var
  | type_ref
  | literal
  | THIS
  | object_def
  | fun_def
  | recover_def
  | AT id_ffi [typeargs] LP [positional] [named] RP [QM]
  | SOURCELOC ;

object_def ::= OBJECT [annotatedids] [cap] [IS type] members END

fun_def ::= LBC [annotatedids] [cap] [param_ref] [typeparams] LP [lambdaparams] RP [lambdacaptures] [COLON type] [QM] ARROW rawseq RBC [cap]

recover_def ::= RCVR [annotatedids] [cap] [param_ref] [typeparams] LP [lambdaparams] RP [lambdacaptures] [COLON type] [QM] ARROW rawseq RBC [cap]

tryblock ::= TRY [annotatedids] rawseq [ELSE annotatedrawseq] [THEN annotatedrawseq] END

matchblock ::= MATCH [annotatedids] rawseq caseexpr* [ELSE annotatedrawseq] END

whileloop ::= WHILE [annotatedids] rawseq DO rawseq [ELSE annotatedrawseq] END ;

forloop ::= FOR [annotatedids] idseq IN rawseq DO rawseq [ELSE annotatedrawseq] END ;

ifblock ::= IF [annotatedids] rawseq THEN rawseq [elif | (ELSE annotatedrawseq)] END ;

tuple ::= COMMA rawseq (COMMA rawseq)* ;

lambdacaptures ::= LP (lambdacapture | THIS) (COMMA (lambdacapture | THIS))* RP ;

lambdacapture ::= id_var [COLON type] [EQUALS infix] ;

lambdaparams ::= lambdaparam (COMMA lambdaparam)* ;

lambdaparam ::= param_ref [COLON type] [EQUALS infix] ;

positional ::= rawseq (COMMA rawseq)* ;

named ::= WHERE namedarg (COMMA namedarg)* ;

namedarg ::= id EQUALS rawseq ;

type ::= atomtype [TYPE_ARROW type] ;

atomtype ::=
    THIS
  | cap
  | LP infixtype [tupletype] RP
  | nominal
  | lambdatype
  | barelambdatype ;

barelambdatype ::=
    RCVR [cap] [id_var] [typeparams] LP [type (COMMA type)*] RP [COLON type] [QM] RBC [cap | gencap] [CARET | BANG] ;

lambdatype ::=
    LBC [cap] [id_var] [typeparams] LP [type (COMMA type)*] RP [COLON type] [QM] RBC [cap | gencap] [CARET | BANG] ;

tupletype ::= COMMA infixtype (COMMA infixtype)* ;

infixtype ::= (type | SCORE) (uniontype | isecttype)* ;

isecttype ::= AMP type ;

uniontype ::= PIPE type ;

nominal ::= [id_var DOT] type_ref [typeargs] [cap | gencap] [CARET | BANG] ;

cap ::= ISO | REF | TRN | VAL | BOX | TAG ;

typeargs ::= LBK typearg (COMMA typearg)* RBK ;

typeparams ::= LBK typeparam (COMMA typeparam)* RBK ;

params ::= (param | ELIPSIS) (COMMA (param | ELIPSIS))* ;

typeparam ::= (type_ref) [COLON type] [EQUALS typearg] ;

typearg ::=
    type
  | literal
  | HASH postfix ;

literal ::=
    true
  | false
  | char
  | number
  | stringliteral ;

stringliteral ::= string | doc_string ;

param ::= param_ref COLON type [EQUALS infix] ;

param_ref ::= id ;

annotatedids ::= "\\" id (COMMA id)* "\\" ;

number ::= float | int ;

comment ::= line_comment | block_comment | doc_string ;