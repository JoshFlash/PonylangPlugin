{
  parserClass="com.github.joshflash.ponylangplugin.parser.PonyParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Pony"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.joshflash.ponylangplugin.language.psi"
  psiImplPackage="com.github.joshflash.ponylangplugin.language.psi.impl"

  elementTypeHolderClass="com.github.joshflash.ponylangplugin.language.psi.PonyTypes"
  elementTypeClass="com.github.joshflash.ponylangplugin.language.psi.PonyElementType"
  tokenTypeClass="com.github.joshflash.ponylangplugin.language.psi.PonyTokenType"

  tokens=[
    space='regexp:\s+'
    id="regexp:[a-zA-Z_][a-zA-Z0-9_]*"
    string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
    number="regexp:\d+"
    line_comment="regexp://.*"
    block_comment="regexp:/\\*.*?\\*/"

    DARROW='=>'
    LARROW='<-'
    LPAREN='('
    RPAREN=')'
    LBRACKET='['
    RBRACKET=']'
    DOT='.'
    COMMA=','
    COLON=':'
    SEMICOLON=';'
    PIPE='|'
    PLUS='+'
    MINUS='-'
    MULTIPLY='*'
    DIVIDE='/'
    MOD='%'
    EQ='='
    EQEQ='=='
    NOTEQ='!='
    LT='<'
    GT='>'
    LTEQ='<='
    GTEQ='>='
    AND='and'
    OR='or'
    NOT='not'
    IS='is'
    AS='as'
    WHERE='where'
  ]
}

program ::= use_declaration* (declaration | external_declaration)*

private declaration ::=
  class_declaration
  | actor_declaration
  | primitive_declaration
  | trait_declaration
  | interface_declaration

use_declaration ::= 'use' string_literal ('=' string_literal)?

class_declaration ::= doc_string? capability? 'class' ('iso' | 'val')? id type_params? ('is' type_list)? field* constructor* method*
actor_declaration ::= doc_string? 'actor' id type_params? ('is' type_list)? field* constructor* behavior* method*
primitive_declaration ::= doc_string? 'primitive' id type_params? method*
trait_declaration ::= doc_string? 'trait' id type_params? method*
interface_declaration ::= doc_string? 'interface' id type_params? method*

capability ::= 'iso' | 'trn' | 'ref' | 'val' | 'box' | 'tag'

field ::= ('let' | 'var') id ':' type_expr ('=' expr)?

type_params ::= '[' type_param (',' type_param)* ']'
type_param ::= id (':' type_expr)?

constructor ::= doc_string? capability? 'new' id? 'create' param_list block
method ::= doc_string? method_modifier? 'fun' capability? id type_params? param_list (':' type_expr)? ('=>' expr)?
behavior ::= doc_string? 'be' id param_list ('=>' expr)?

method_modifier ::= 'ref' | 'val' | 'box'

param_list ::= '(' (param (',' param)*)? ')'
param ::= id ':' type_expr

type_expr ::= primary_type type_suffix*
primary_type ::= id type_args? | '(' type_expr ')'
type_suffix ::= capability | '|' primary_type | '&' primary_type
type_args ::= '[' type_expr (',' type_expr)* ']'
type_list ::= type_expr (',' type_expr)*

expr ::= unary_op? primary expr_suffix*
primary ::=
  literal
  | id
  | block
  | if_expr
  | match_expr
  | try_expr
  | recover_expr
  | consume_expr
  | '(' expr ')'

expr_suffix ::=
  binary_op expr
  | call_args
  | dot_access

binary_op ::= '+' | '-' | '*' | '/' | '=' | '==' | '!=' | '<' | '>' | '<=' | '>=' | 'and' | 'or'
unary_op ::= '-' | 'not'

call_args ::= '(' (expr (',' expr)*)? ')'
dot_access ::= '.' id

block ::= ('regexp:\n\t' expr)+
if_expr ::= 'if' expr 'then' expr ('else' expr)?
match_expr ::= 'match' expr ('|' match_case)* ('else' expr)?
match_case ::= pattern '=>' expr
try_expr ::= 'try' expr ('else' expr)? 'end'
recover_expr ::= 'recover' capability? expr 'end'
consume_expr ::= 'consume' expr

pattern ::= literal | id | '(' pattern ')'

literal ::= number | string_literal | boolean_literal | 'None'
boolean_literal ::= 'true' | 'false'
string_literal ::= string

doc_string ::= '"""' string '"""'

external_declaration ::= '<<' id expr* '>>'