// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _PonyLexer.flex

package com.github.joshflash.ponylangplugin.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.joshflash.ponylangplugin.language.psi.PonyTypes.*;


public class _PonyLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\7\1\10\4\0\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\12\22\1\23\1\24\1\25"+
    "\1\26\1\27\2\0\4\30\1\31\2\30\1\32\2\30"+
    "\1\33\2\30\1\34\5\30\1\35\2\30\1\36\3\30"+
    "\1\37\1\40\1\41\1\0\1\42\1\0\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\30\1\51\1\52\2\30"+
    "\1\53\1\54\1\55\1\56\1\57\1\30\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\30\1\66\1\30\12\0"+
    "\1\67\32\0\1\6\u01df\0\1\6\177\0\13\6\35\0"+
    "\2\67\5\0\1\6\57\0\1\6\240\0\1\6\377\0"+
    "\u0100\70";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\3\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\2\21\1\22\1\23\20\21\1\24\1\0"+
    "\1\25\4\0\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\21\1\0\1\21\1\34\2\21\1\35\5\21\1\36"+
    "\1\37\1\40\11\21\2\0\1\41\1\26\1\21\1\0"+
    "\5\21\1\42\1\43\1\44\1\45\1\46\1\21\1\47"+
    "\2\21\1\50\1\21\1\51\1\52\1\53\1\54\2\21"+
    "\1\0\3\21\1\55\5\21\1\56\1\21\1\0\1\57"+
    "\1\60\1\21\1\61\1\62\2\21\1\63\1\21\1\0"+
    "\3\21\1\64\1\65\1\66\1\21\1\67\1\21\1\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[138];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\71\0\71"+
    "\0\71\0\71\0\71\0\71\0\71\0\u0156\0\u018f\0\71"+
    "\0\71\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\71"+
    "\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad"+
    "\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675"+
    "\0\71\0\344\0\71\0\u06ae\0\u011d\0\u06e7\0\u0720\0\u0759"+
    "\0\71\0\71\0\71\0\71\0\71\0\u0792\0\u07cb\0\u0804"+
    "\0\u0273\0\u083d\0\u0876\0\u0273\0\u08af\0\u08e8\0\u0921\0\u095a"+
    "\0\u0993\0\u0273\0\u0273\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0"+
    "\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0720"+
    "\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07"+
    "\0\u0273\0\u0273\0\u0273\0\u0273\0\u0273\0\u0e40\0\u0273\0\u0e79"+
    "\0\u0eb2\0\u0273\0\u0eeb\0\u0273\0\u0273\0\u0273\0\u0273\0\u0f24"+
    "\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u0273\0\u107a\0\u10b3"+
    "\0\u10ec\0\u1125\0\u115e\0\u0273\0\u1197\0\u11d0\0\u0273\0\u0273"+
    "\0\u1209\0\u0273\0\u0273\0\u1242\0\u127b\0\u0273\0\u12b4\0\u12ed"+
    "\0\u1326\0\u135f\0\u1398\0\u0273\0\u12ed\0\u0273\0\u13d1\0\u0273"+
    "\0\u140a\0\u0273";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[138];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\6\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\3\25\1\26\3\25\1\27\1\2"+
    "\1\30\1\25\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\25\1\37\1\40\1\41\1\42\1\25\1\43\1\44"+
    "\1\25\1\45\1\46\1\47\1\50\1\25\1\3\1\2"+
    "\72\0\6\3\60\0\1\3\27\0\1\51\42\0\10\52"+
    "\1\53\27\52\1\54\30\52\11\55\1\53\26\55\1\56"+
    "\30\55\14\57\1\0\4\57\1\60\47\57\22\0\1\17"+
    "\65\0\1\61\6\0\1\62\70\0\1\63\1\64\67\0"+
    "\1\65\64\0\1\25\5\0\7\25\3\0\25\25\24\0"+
    "\1\25\5\0\6\25\1\66\3\0\25\25\3\0\1\67"+
    "\111\0\1\25\5\0\7\25\3\0\3\25\1\70\21\25"+
    "\24\0\1\25\5\0\7\25\3\0\5\25\1\71\17\25"+
    "\24\0\1\25\5\0\7\25\3\0\11\25\1\72\2\25"+
    "\1\73\10\25\24\0\1\25\5\0\7\25\3\0\14\25"+
    "\1\74\10\25\24\0\1\25\5\0\7\25\3\0\11\25"+
    "\1\75\1\76\1\77\11\25\24\0\1\25\5\0\7\25"+
    "\3\0\14\25\1\100\4\25\1\101\3\25\24\0\1\25"+
    "\5\0\7\25\3\0\6\25\1\102\4\25\1\103\3\25"+
    "\1\104\5\25\24\0\1\25\5\0\7\25\3\0\5\25"+
    "\1\105\17\25\24\0\1\25\5\0\7\25\3\0\1\25"+
    "\1\106\23\25\24\0\1\25\5\0\7\25\3\0\5\25"+
    "\1\107\17\25\24\0\1\25\5\0\7\25\3\0\16\25"+
    "\1\110\6\25\24\0\1\25\5\0\7\25\3\0\5\25"+
    "\1\111\17\25\24\0\1\25\5\0\7\25\3\0\16\25"+
    "\1\112\6\25\24\0\1\25\5\0\7\25\3\0\17\25"+
    "\1\113\5\25\24\0\1\25\5\0\7\25\3\0\1\25"+
    "\1\114\23\25\24\0\1\25\5\0\7\25\3\0\10\25"+
    "\1\115\14\25\42\0\1\116\70\0\1\117\30\0\14\57"+
    "\1\0\4\57\1\120\47\57\2\60\4\57\6\60\1\121"+
    "\52\60\2\57\22\0\1\25\5\0\7\25\3\0\1\122"+
    "\24\25\4\0\1\123\110\0\1\25\5\0\7\25\3\0"+
    "\20\25\1\124\4\25\24\0\1\25\5\0\7\25\3\0"+
    "\1\25\1\125\23\25\24\0\1\25\5\0\7\25\3\0"+
    "\13\25\1\126\11\25\24\0\1\25\5\0\7\25\3\0"+
    "\17\25\1\127\5\25\24\0\1\25\5\0\7\25\3\0"+
    "\2\25\1\130\22\25\24\0\1\25\5\0\7\25\3\0"+
    "\4\25\1\131\20\25\24\0\1\25\5\0\7\25\3\0"+
    "\16\25\1\132\6\25\24\0\1\25\5\0\7\25\3\0"+
    "\13\25\1\133\11\25\24\0\1\25\5\0\7\25\3\0"+
    "\14\25\1\134\10\25\24\0\1\25\5\0\7\25\3\0"+
    "\20\25\1\135\4\25\24\0\1\25\5\0\7\25\3\0"+
    "\20\25\1\136\4\25\24\0\1\25\5\0\7\25\3\0"+
    "\23\25\1\137\1\25\24\0\1\25\5\0\7\25\3\0"+
    "\10\25\1\140\14\25\24\0\1\25\5\0\7\25\3\0"+
    "\3\25\1\141\2\25\1\142\16\25\24\0\1\25\5\0"+
    "\7\25\3\0\1\25\1\143\22\25\1\144\24\0\1\25"+
    "\5\0\7\25\3\0\5\25\1\145\17\25\24\0\1\25"+
    "\5\0\7\25\3\0\11\25\1\146\4\25\1\147\6\25"+
    "\24\0\1\25\5\0\7\25\3\0\20\25\1\150\4\25"+
    "\2\0\2\52\4\0\61\52\2\0\2\55\4\0\61\55"+
    "\2\0\2\121\4\0\61\121\24\0\1\25\5\0\5\25"+
    "\1\151\1\25\3\0\25\25\5\0\1\152\107\0\1\25"+
    "\5\0\7\25\3\0\14\25\1\153\10\25\24\0\1\25"+
    "\5\0\7\25\3\0\17\25\1\154\5\25\24\0\1\25"+
    "\5\0\7\25\3\0\17\25\1\155\5\25\24\0\1\25"+
    "\5\0\7\25\3\0\5\25\1\156\17\25\24\0\1\25"+
    "\5\0\7\25\3\0\5\25\1\157\17\25\24\0\1\25"+
    "\5\0\7\25\3\0\3\25\1\160\21\25\24\0\1\25"+
    "\5\0\7\25\3\0\12\25\1\161\12\25\24\0\1\25"+
    "\5\0\7\25\3\0\14\25\1\162\10\25\24\0\1\25"+
    "\5\0\7\25\3\0\10\25\1\163\14\25\24\0\1\25"+
    "\5\0\7\25\3\0\7\25\1\164\15\25\24\0\1\25"+
    "\5\0\2\25\1\165\4\25\3\0\25\25\6\0\1\166"+
    "\106\0\1\25\5\0\7\25\3\0\16\25\1\167\6\25"+
    "\24\0\1\25\5\0\7\25\3\0\17\25\1\170\5\25"+
    "\24\0\1\25\5\0\7\25\3\0\21\25\1\171\3\25"+
    "\24\0\1\25\5\0\7\25\3\0\4\25\1\172\20\25"+
    "\24\0\1\25\5\0\7\25\3\0\7\25\1\173\15\25"+
    "\24\0\1\25\5\0\7\25\3\0\10\25\1\174\14\25"+
    "\24\0\1\25\5\0\7\25\3\0\22\25\1\175\2\25"+
    "\24\0\1\25\5\0\7\25\3\0\20\25\1\176\4\25"+
    "\24\0\1\25\5\0\1\25\1\177\5\25\3\0\25\25"+
    "\7\0\1\200\105\0\1\25\5\0\7\25\3\0\12\25"+
    "\1\201\12\25\24\0\1\25\5\0\7\25\3\0\20\25"+
    "\1\202\4\25\24\0\1\25\5\0\7\25\3\0\5\25"+
    "\1\203\17\25\24\0\1\25\5\0\4\25\1\204\2\25"+
    "\3\0\25\25\43\0\1\205\51\0\1\25\5\0\7\25"+
    "\3\0\5\25\1\206\17\25\24\0\1\25\5\0\7\25"+
    "\3\0\10\25\1\207\14\25\24\0\1\25\5\0\7\25"+
    "\3\0\16\25\1\210\6\25\24\0\1\25\5\0\7\25"+
    "\3\0\22\25\1\211\2\25\24\0\1\25\5\0\7\25"+
    "\3\0\5\25\1\212\17\25\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[5187];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\7\11\2\1\2\11\6\1\1\11"+
    "\20\1\1\11\1\0\1\11\4\0\1\1\5\11\1\1"+
    "\1\0\26\1\2\0\3\1\1\0\26\1\1\0\13\1"+
    "\1\0\11\1\1\0\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[138];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _PonyLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _PonyLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 57: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 58: break;
          case 3:
            { return LEFT_PAREN;
            }
          // fall through
          case 59: break;
          case 4:
            { return RIGHT_PAREN;
            }
          // fall through
          case 60: break;
          case 5:
            { return MULT;
            }
          // fall through
          case 61: break;
          case 6:
            { return PLUS;
            }
          // fall through
          case 62: break;
          case 7:
            { return COMMA;
            }
          // fall through
          case 63: break;
          case 8:
            { return MINUS;
            }
          // fall through
          case 64: break;
          case 9:
            { return DOT;
            }
          // fall through
          case 65: break;
          case 10:
            { return DIV;
            }
          // fall through
          case 66: break;
          case 11:
            { return NUMBER;
            }
          // fall through
          case 67: break;
          case 12:
            { return COLON;
            }
          // fall through
          case 68: break;
          case 13:
            { return SEMICOLON;
            }
          // fall through
          case 69: break;
          case 14:
            { return LESS_THAN;
            }
          // fall through
          case 70: break;
          case 15:
            { return ASSIGNMENT;
            }
          // fall through
          case 71: break;
          case 16:
            { return GREATER_THAN;
            }
          // fall through
          case 72: break;
          case 17:
            { return IDENTIFIER;
            }
          // fall through
          case 73: break;
          case 18:
            { return LEFT_BRACKET;
            }
          // fall through
          case 74: break;
          case 19:
            { return RIGHT_BRACKET;
            }
          // fall through
          case 75: break;
          case 20:
            { return NOT_EQUALS;
            }
          // fall through
          case 76: break;
          case 21:
            { return STRING;
            }
          // fall through
          case 77: break;
          case 22:
            { return LINE_COMMENT;
            }
          // fall through
          case 78: break;
          case 23:
            { return FAT_ARROW;
            }
          // fall through
          case 79: break;
          case 24:
            { return LESS_EQUAL;
            }
          // fall through
          case 80: break;
          case 25:
            { return EQUALS;
            }
          // fall through
          case 81: break;
          case 26:
            { return ARROW;
            }
          // fall through
          case 82: break;
          case 27:
            { return GREATER_EQUAL;
            }
          // fall through
          case 83: break;
          case 28:
            { return KW_BE;
            }
          // fall through
          case 84: break;
          case 29:
            { return KW_DO;
            }
          // fall through
          case 85: break;
          case 30:
            { return KW_IF;
            }
          // fall through
          case 86: break;
          case 31:
            { return KW_IN;
            }
          // fall through
          case 87: break;
          case 32:
            { return KW_IS;
            }
          // fall through
          case 88: break;
          case 33:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 89: break;
          case 34:
            { return KW_END;
            }
          // fall through
          case 90: break;
          case 35:
            { return KW_FOR;
            }
          // fall through
          case 91: break;
          case 36:
            { return KW_FUN;
            }
          // fall through
          case 92: break;
          case 37:
            { return KW_ISO;
            }
          // fall through
          case 93: break;
          case 38:
            { return KW_LET;
            }
          // fall through
          case 94: break;
          case 39:
            { return KW_NEW;
            }
          // fall through
          case 95: break;
          case 40:
            { return KW_REF;
            }
          // fall through
          case 96: break;
          case 41:
            { return KW_TRY;
            }
          // fall through
          case 97: break;
          case 42:
            { return KW_USE;
            }
          // fall through
          case 98: break;
          case 43:
            { return KW_VAL;
            }
          // fall through
          case 99: break;
          case 44:
            { return KW_VAR;
            }
          // fall through
          case 100: break;
          case 45:
            { return KW_ELSE;
            }
          // fall through
          case 101: break;
          case 46:
            { return KW_WITH;
            }
          // fall through
          case 102: break;
          case 47:
            { return KW_ACTOR;
            }
          // fall through
          case 103: break;
          case 48:
            { return KW_CLASS;
            }
          // fall through
          case 104: break;
          case 49:
            { return KW_EMBED;
            }
          // fall through
          case 105: break;
          case 50:
            { return KW_MATCH;
            }
          // fall through
          case 106: break;
          case 51:
            { return KW_TRAIT;
            }
          // fall through
          case 107: break;
          case 52:
            { return KW_THEN;
            }
          // fall through
          case 108: break;
          case 53:
            { return SPACE;
            }
          // fall through
          case 109: break;
          case 54:
            { return KW_CONSUME;
            }
          // fall through
          case 110: break;
          case 55:
            { return KW_RECOVER;
            }
          // fall through
          case 111: break;
          case 56:
            { return KW_PRIMITIVE;
            }
          // fall through
          case 112: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
