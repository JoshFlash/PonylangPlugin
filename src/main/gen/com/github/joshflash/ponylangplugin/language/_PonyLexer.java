// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _PonyLexer.flex

package com.github.joshflash.ponylangplugin.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.joshflash.ponylangplugin.language.psi.PonyTypes.*;


public class _PonyLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\4\2\22\0\1\3\1\4\1\5\1\6"+
    "\1\0\1\7\1\10\1\0\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\11\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\32\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\0\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\60\1\71\1\72"+
    "\1\73\1\74\6\0\1\2\32\0\1\1\u01df\0\1\1"+
    "\177\0\13\1\35\0\2\2\5\0\1\1\57\0\1\1"+
    "\240\0\1\1\377\0\u0100\75";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\1\1\31\1\32\25\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\0\1\41\4\0\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\0\1\54\1\0\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\4\33\1\73\1\74\5\33\1\75\7\33\1\76"+
    "\1\77\1\100\5\33\1\101\15\33\1\102\5\0\1\103"+
    "\1\104\1\105\1\106\1\55\1\107\1\110\1\111\1\112"+
    "\1\113\3\33\1\114\1\115\7\33\1\116\2\33\1\117"+
    "\1\120\4\33\1\121\1\122\1\33\1\123\1\124\3\33"+
    "\1\125\3\33\1\126\3\33\1\127\1\33\1\130\2\33"+
    "\1\131\1\132\1\133\3\33\1\134\1\0\1\135\2\0"+
    "\11\33\1\136\6\33\1\137\7\33\1\140\1\141\1\33"+
    "\1\142\1\143\3\33\1\144\2\0\1\145\1\146\1\33"+
    "\1\147\1\150\5\33\1\151\1\152\1\153\1\154\2\33"+
    "\1\155\6\33\1\156\1\157\1\160\1\161\5\33\1\162"+
    "\1\163\1\33\1\164\2\33\1\165\1\166\1\167\2\33"+
    "\1\170\4\33\1\171\2\33\1\172\1\173\2\33\1\174"+
    "\2\33\1\175\1\176\6\33\1\177\4\33\1\200";

  private static int [] zzUnpackAction() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\76"+
    "\0\76\0\76\0\u01b2\0\u01f0\0\76\0\u022e\0\u026c\0\u02aa"+
    "\0\u02e8\0\76\0\76\0\u0326\0\u0364\0\u03a2\0\76\0\u03e0"+
    "\0\u041e\0\76\0\u045c\0\76\0\76\0\u049a\0\u04d8\0\u0516"+
    "\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706"+
    "\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a\0\u08b8\0\u08f6"+
    "\0\u0934\0\u0972\0\76\0\76\0\76\0\76\0\u09b0\0\370"+
    "\0\76\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\76\0\76"+
    "\0\76\0\76\0\76\0\76\0\76\0\76\0\76\0\u0b24"+
    "\0\76\0\u0b62\0\u0ba0\0\u0b62\0\u0b62\0\76\0\u0bde\0\u0c1c"+
    "\0\76\0\u0c5a\0\76\0\u0c98\0\u0cd6\0\76\0\76\0\u0d14"+
    "\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u064c\0\u064c\0\u0e4a\0\u0e88"+
    "\0\u0ec6\0\u0f04\0\u0f42\0\u064c\0\u0f80\0\u0fbe\0\u0ffc\0\u103a"+
    "\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a"+
    "\0\u1268\0\u12a6\0\u12e4\0\u064c\0\u1322\0\u1360\0\u139e\0\u13dc"+
    "\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc"+
    "\0\u160a\0\76\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740\0\76"+
    "\0\76\0\76\0\u0b62\0\u177e\0\76\0\76\0\76\0\76"+
    "\0\76\0\u17bc\0\u17fa\0\u1838\0\u064c\0\u064c\0\u1876\0\u18b4"+
    "\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u064c\0\u1a28\0\u1a66"+
    "\0\u064c\0\u064c\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u064c\0\u064c"+
    "\0\u1b9c\0\u064c\0\u064c\0\u1bda\0\u1c18\0\u1c56\0\u064c\0\u1c94"+
    "\0\u1cd2\0\u1d10\0\u064c\0\u1d4e\0\u1d8c\0\u1dca\0\u064c\0\u1e08"+
    "\0\u064c\0\u1e46\0\u1e84\0\u064c\0\u064c\0\u064c\0\u1ec2\0\u1f00"+
    "\0\u1f3e\0\u064c\0\u1f7c\0\76\0\u1fba\0\u1ff8\0\u2036\0\u2074"+
    "\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264"+
    "\0\u22a2\0\u22e0\0\u231e\0\u235c\0\u239a\0\u23d8\0\u064c\0\u2416"+
    "\0\u2454\0\u2492\0\u24d0\0\u250e\0\u254c\0\u258a\0\u064c\0\u064c"+
    "\0\u25c8\0\u064c\0\u064c\0\u2606\0\u2644\0\u2682\0\u064c\0\u26c0"+
    "\0\u26fe\0\u064c\0\u064c\0\u273c\0\u064c\0\u064c\0\u277a\0\u27b8"+
    "\0\u27f6\0\u2834\0\u2872\0\u064c\0\u064c\0\u064c\0\u064c\0\u28b0"+
    "\0\u28ee\0\u064c\0\u292c\0\u296a\0\u29a8\0\u29e6\0\u2a24\0\u2a62"+
    "\0\u064c\0\u064c\0\u064c\0\u064c\0\u2aa0\0\u2ade\0\u2b1c\0\u2b5a"+
    "\0\u2b98\0\u064c\0\u064c\0\u2bd6\0\u064c\0\u2c14\0\u2c52\0\u064c"+
    "\0\u064c\0\u064c\0\u2c90\0\u2cce\0\u064c\0\u2d0c\0\u2d4a\0\u2d88"+
    "\0\u2dc6\0\u064c\0\u2e04\0\u2e42\0\u064c\0\u064c\0\u2e80\0\u2ebe"+
    "\0\u064c\0\u2efc\0\u2f3a\0\u064c\0\u064c\0\u2f78\0\u2fb6\0\u2ff4"+
    "\0\u3032\0\u3070\0\u30ae\0\u064c\0\u30ec\0\u312a\0\u3168\0\u31a6"+
    "\0\u064c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\2\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\2\45\1\46\2\45\1\47\1\50"+
    "\1\51\1\52\1\53\1\45\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\45\1\63\1\64\1\65\1\66"+
    "\1\2\77\0\3\3\120\0\1\67\47\0\5\70\1\71"+
    "\26\70\1\72\41\70\40\0\1\73\20\0\1\74\1\75"+
    "\22\0\1\76\20\0\1\77\43\0\1\100\31\0\1\101"+
    "\43\0\1\102\31\0\1\103\43\0\1\104\30\0\1\105"+
    "\1\106\43\0\1\107\20\0\1\110\7\0\1\111\46\0"+
    "\13\112\1\0\4\112\1\113\7\112\1\114\43\112\1\115"+
    "\1\112\21\0\2\21\76\0\1\116\1\0\1\117\1\120"+
    "\45\0\1\121\27\0\1\122\1\123\74\0\1\124\1\125"+
    "\44\0\1\126\72\0\1\127\25\0\2\31\7\0\1\31"+
    "\4\0\32\31\62\0\1\130\41\0\2\45\7\0\1\45"+
    "\4\0\1\131\31\45\26\0\2\45\7\0\1\45\4\0"+
    "\3\45\1\132\1\133\11\45\1\134\4\45\1\135\6\45"+
    "\26\0\2\45\7\0\1\45\4\0\5\45\1\136\11\45"+
    "\1\137\2\45\1\140\7\45\26\0\2\45\7\0\1\45"+
    "\4\0\14\45\1\141\2\45\1\142\12\45\26\0\2\45"+
    "\7\0\1\45\4\0\11\45\1\143\5\45\1\144\12\45"+
    "\26\0\2\45\7\0\1\45\4\0\14\45\1\145\1\146"+
    "\1\147\3\45\1\150\7\45\26\0\2\45\7\0\1\45"+
    "\4\0\1\45\1\151\15\45\1\152\5\45\1\153\4\45"+
    "\26\0\2\45\7\0\1\45\4\0\32\45\26\0\2\45"+
    "\7\0\1\45\4\0\6\45\1\154\7\45\1\155\4\45"+
    "\1\156\6\45\26\0\2\45\7\0\1\45\4\0\5\45"+
    "\1\157\24\45\26\0\2\45\7\0\1\45\4\0\1\45"+
    "\1\160\30\45\26\0\2\45\7\0\1\45\4\0\5\45"+
    "\1\161\11\45\1\162\12\45\26\0\2\45\7\0\1\45"+
    "\4\0\2\45\1\163\17\45\1\164\7\45\26\0\2\45"+
    "\7\0\1\45\4\0\22\45\1\165\7\45\26\0\2\45"+
    "\7\0\1\45\4\0\5\45\1\166\24\45\26\0\2\45"+
    "\7\0\1\45\4\0\24\45\1\167\5\45\26\0\2\45"+
    "\7\0\1\45\4\0\1\45\1\170\6\45\1\171\11\45"+
    "\1\172\6\45\1\173\26\0\2\45\7\0\1\45\4\0"+
    "\16\45\1\174\4\45\1\175\6\45\26\0\2\45\7\0"+
    "\1\45\4\0\1\45\1\176\30\45\26\0\2\45\7\0"+
    "\1\45\4\0\10\45\1\177\1\200\20\45\26\0\2\45"+
    "\7\0\1\45\4\0\17\45\1\201\12\45\101\0\1\202"+
    "\6\0\1\70\13\0\1\70\12\0\1\70\3\0\2\70"+
    "\2\0\2\70\7\0\1\70\3\0\1\70\1\0\1\70"+
    "\1\0\1\70\63\0\1\203\1\0\1\204\64\0\1\205"+
    "\75\0\1\206\2\0\1\207\56\0\1\210\43\0\1\211"+
    "\20\0\1\212\56\0\13\112\1\0\4\112\1\213\55\112"+
    "\2\113\1\112\10\113\1\214\61\113\1\112\74\0\1\215"+
    "\75\0\1\216\75\0\1\217\75\0\1\220\75\0\1\221"+
    "\4\0\1\130\30\0\1\130\24\0\1\130\1\0\1\130"+
    "\33\0\2\45\7\0\1\45\4\0\14\45\1\222\15\45"+
    "\26\0\2\45\7\0\1\45\4\0\24\45\1\223\5\45"+
    "\26\0\2\45\7\0\1\45\4\0\4\45\1\224\25\45"+
    "\26\0\2\45\7\0\1\45\4\0\4\45\1\225\25\45"+
    "\26\0\2\45\7\0\1\45\4\0\30\45\1\226\1\45"+
    "\26\0\2\45\7\0\1\45\4\0\5\45\1\227\24\45"+
    "\26\0\2\45\7\0\1\45\4\0\1\45\1\230\30\45"+
    "\26\0\2\45\7\0\1\45\4\0\15\45\1\231\1\232"+
    "\13\45\26\0\2\45\7\0\1\45\4\0\7\45\1\233"+
    "\22\45\26\0\2\45\7\0\1\45\4\0\23\45\1\234"+
    "\6\45\26\0\2\45\7\0\1\45\4\0\2\45\1\235"+
    "\27\45\26\0\2\45\7\0\1\45\4\0\4\45\1\236"+
    "\25\45\26\0\2\45\7\0\1\45\4\0\22\45\1\237"+
    "\7\45\26\0\2\45\7\0\1\45\4\0\14\45\1\240"+
    "\15\45\26\0\2\45\7\0\1\45\4\0\22\45\1\241"+
    "\7\45\26\0\2\45\7\0\1\45\4\0\16\45\1\242"+
    "\13\45\26\0\2\45\7\0\1\45\4\0\4\45\1\243"+
    "\17\45\1\244\5\45\26\0\2\45\7\0\1\45\4\0"+
    "\24\45\1\245\5\45\26\0\2\45\7\0\1\45\4\0"+
    "\16\45\1\246\1\247\12\45\26\0\2\45\7\0\1\45"+
    "\4\0\24\45\1\250\5\45\26\0\2\45\7\0\1\45"+
    "\4\0\24\45\1\251\5\45\26\0\2\45\7\0\1\45"+
    "\4\0\27\45\1\252\2\45\26\0\2\45\7\0\1\45"+
    "\4\0\24\45\1\253\5\45\26\0\2\45\7\0\1\45"+
    "\4\0\12\45\1\254\17\45\26\0\2\45\7\0\1\45"+
    "\4\0\11\45\1\255\20\45\26\0\2\45\7\0\1\45"+
    "\4\0\3\45\1\256\2\45\1\257\11\45\1\260\3\45"+
    "\1\261\5\45\26\0\2\45\7\0\1\45\4\0\22\45"+
    "\1\262\7\45\26\0\2\45\7\0\1\45\4\0\7\45"+
    "\1\263\22\45\26\0\2\45\7\0\1\45\4\0\5\45"+
    "\1\264\3\45\1\265\20\45\26\0\2\45\7\0\1\45"+
    "\4\0\1\45\1\266\14\45\1\267\6\45\1\270\3\45"+
    "\1\271\26\0\2\45\7\0\1\45\4\0\20\45\1\272"+
    "\11\45\26\0\2\45\7\0\1\45\4\0\24\45\1\273"+
    "\5\45\26\0\2\45\7\0\1\45\4\0\5\45\1\274"+
    "\24\45\26\0\2\45\7\0\1\45\4\0\14\45\1\275"+
    "\5\45\1\276\7\45\26\0\2\45\7\0\1\45\4\0"+
    "\5\45\1\277\3\45\1\300\20\45\26\0\2\45\7\0"+
    "\1\45\4\0\24\45\1\301\5\45\26\0\2\45\7\0"+
    "\1\45\4\0\22\45\1\302\7\45\55\0\1\303\115\0"+
    "\1\304\45\0\1\305\112\0\1\305\60\0\1\306\35\0"+
    "\2\214\1\0\72\214\22\0\2\45\7\0\1\45\4\0"+
    "\17\45\1\307\12\45\26\0\2\45\7\0\1\45\4\0"+
    "\17\45\1\310\12\45\26\0\2\45\7\0\1\45\4\0"+
    "\22\45\1\311\7\45\26\0\2\45\7\0\1\45\4\0"+
    "\1\45\1\312\30\45\26\0\2\45\7\0\1\45\4\0"+
    "\23\45\1\313\6\45\26\0\2\45\7\0\1\45\4\0"+
    "\20\45\1\314\11\45\26\0\2\45\7\0\1\45\4\0"+
    "\23\45\1\315\1\316\5\45\26\0\2\45\7\0\1\45"+
    "\4\0\5\45\1\317\24\45\26\0\2\45\7\0\1\45"+
    "\4\0\5\45\1\320\24\45\26\0\2\45\7\0\1\45"+
    "\4\0\5\45\1\321\24\45\26\0\2\45\7\0\1\45"+
    "\4\0\17\45\1\322\12\45\26\0\2\45\7\0\1\45"+
    "\4\0\23\45\1\323\6\45\26\0\2\45\7\0\1\45"+
    "\4\0\5\45\1\324\24\45\26\0\2\45\7\0\1\45"+
    "\4\0\31\45\1\325\26\0\2\45\7\0\1\45\4\0"+
    "\5\45\1\326\24\45\26\0\2\45\7\0\1\45\4\0"+
    "\24\45\1\327\5\45\26\0\2\45\7\0\1\45\4\0"+
    "\3\45\1\330\26\45\26\0\2\45\7\0\1\45\4\0"+
    "\5\45\1\331\24\45\26\0\2\45\7\0\1\45\4\0"+
    "\15\45\1\332\14\45\26\0\2\45\7\0\1\45\4\0"+
    "\17\45\1\333\12\45\26\0\2\45\7\0\1\45\4\0"+
    "\5\45\1\334\24\45\26\0\2\45\7\0\1\45\4\0"+
    "\25\45\1\335\4\45\26\0\2\45\7\0\1\45\4\0"+
    "\25\45\1\336\4\45\26\0\2\45\7\0\1\45\4\0"+
    "\16\45\1\337\13\45\26\0\2\45\7\0\1\45\4\0"+
    "\23\45\1\340\6\45\26\0\2\45\7\0\1\45\4\0"+
    "\11\45\1\341\20\45\26\0\2\45\7\0\1\45\4\0"+
    "\5\45\1\342\24\45\26\0\2\45\7\0\1\45\4\0"+
    "\5\45\1\343\24\45\26\0\2\45\7\0\1\45\4\0"+
    "\11\45\1\344\20\45\26\0\2\45\7\0\1\45\4\0"+
    "\22\45\1\345\7\45\26\0\2\45\7\0\1\45\4\0"+
    "\14\45\1\346\15\45\26\0\2\45\7\0\1\45\4\0"+
    "\10\45\1\347\21\45\45\0\1\350\100\0\1\304\113\0"+
    "\1\351\35\0\2\45\7\0\1\45\4\0\3\45\1\352"+
    "\26\45\26\0\2\45\7\0\1\45\4\0\22\45\1\353"+
    "\7\45\26\0\2\45\7\0\1\45\4\0\5\45\1\354"+
    "\24\45\26\0\2\45\7\0\1\45\4\0\13\45\1\355"+
    "\16\45\26\0\2\45\7\0\1\45\4\0\23\45\1\356"+
    "\6\45\26\0\2\45\7\0\1\45\4\0\11\45\1\357"+
    "\20\45\26\0\2\45\7\0\1\45\4\0\25\45\1\360"+
    "\4\45\26\0\2\45\7\0\1\45\4\0\11\45\1\361"+
    "\20\45\26\0\2\45\7\0\1\45\4\0\23\45\1\362"+
    "\6\45\26\0\2\45\7\0\1\45\4\0\11\45\1\363"+
    "\20\45\26\0\2\45\7\0\1\45\4\0\4\45\1\364"+
    "\25\45\26\0\2\45\7\0\1\45\4\0\22\45\1\365"+
    "\7\45\26\0\2\45\7\0\1\45\4\0\5\45\1\366"+
    "\24\45\26\0\2\45\7\0\1\45\4\0\6\45\1\367"+
    "\23\45\26\0\2\45\7\0\1\45\4\0\20\45\1\370"+
    "\11\45\26\0\2\45\7\0\1\45\4\0\22\45\1\371"+
    "\7\45\26\0\2\45\7\0\1\45\4\0\10\45\1\372"+
    "\21\45\26\0\2\45\7\0\1\45\4\0\3\45\1\373"+
    "\26\45\26\0\2\45\7\0\1\45\4\0\11\45\1\374"+
    "\20\45\26\0\2\45\7\0\1\45\4\0\26\45\1\375"+
    "\3\45\26\0\2\45\7\0\1\45\4\0\1\45\1\376"+
    "\30\45\26\0\2\45\7\0\1\45\4\0\22\45\1\377"+
    "\7\45\26\0\2\45\7\0\1\45\4\0\3\45\1\u0100"+
    "\26\45\26\0\2\45\7\0\1\45\4\0\24\45\1\u0101"+
    "\5\45\26\0\2\45\7\0\1\45\4\0\14\45\1\u0102"+
    "\15\45\26\0\2\45\7\0\1\45\4\0\5\45\1\u0103"+
    "\24\45\26\0\2\45\7\0\1\45\4\0\5\45\1\u0104"+
    "\24\45\67\0\1\304\57\0\1\304\52\0\2\45\7\0"+
    "\1\45\4\0\23\45\1\u0105\6\45\26\0\2\45\7\0"+
    "\1\45\4\0\14\45\1\u0106\15\45\26\0\2\45\7\0"+
    "\1\45\4\0\15\45\1\u0107\14\45\26\0\2\45\7\0"+
    "\1\45\4\0\16\45\1\u0108\13\45\26\0\2\45\7\0"+
    "\1\45\4\0\24\45\1\u0109\5\45\26\0\2\45\7\0"+
    "\1\45\4\0\6\45\1\u010a\23\45\26\0\2\45\7\0"+
    "\1\45\4\0\5\45\1\u010b\24\45\26\0\2\45\7\0"+
    "\1\45\4\0\6\45\1\u010c\23\45\26\0\2\45\7\0"+
    "\1\45\4\0\24\45\1\u010d\5\45\26\0\2\45\7\0"+
    "\1\45\4\0\24\45\1\u010e\5\45\26\0\2\45\7\0"+
    "\1\45\4\0\5\45\1\u010f\24\45\26\0\2\45\7\0"+
    "\1\45\4\0\24\45\1\u0110\5\45\26\0\2\45\7\0"+
    "\1\45\4\0\16\45\1\u0111\13\45\26\0\2\45\7\0"+
    "\1\45\4\0\24\45\1\u0112\5\45\26\0\2\45\7\0"+
    "\1\45\4\0\23\45\1\u0113\6\45\26\0\2\45\7\0"+
    "\1\45\4\0\5\45\1\u0114\24\45\26\0\2\45\7\0"+
    "\1\45\4\0\5\45\1\u0115\24\45\26\0\2\45\7\0"+
    "\1\45\4\0\25\45\1\u0116\4\45\26\0\2\45\7\0"+
    "\1\45\4\0\17\45\1\u0117\12\45\26\0\2\45\7\0"+
    "\1\45\4\0\1\45\1\u0118\30\45\26\0\2\45\7\0"+
    "\1\45\4\0\11\45\1\u0119\20\45\26\0\2\45\7\0"+
    "\1\45\4\0\22\45\1\u011a\7\45\26\0\2\45\7\0"+
    "\1\45\4\0\17\45\1\u011b\12\45\26\0\2\45\7\0"+
    "\1\45\4\0\1\u011c\31\45\26\0\2\45\7\0\1\45"+
    "\4\0\5\45\1\u011d\24\45\26\0\2\45\7\0\1\45"+
    "\4\0\6\45\1\u011e\23\45\26\0\2\45\7\0\1\45"+
    "\4\0\3\45\1\u011f\26\45\26\0\2\45\7\0\1\45"+
    "\4\0\26\45\1\u0120\3\45\26\0\2\45\7\0\1\45"+
    "\4\0\6\45\1\u0121\23\45\26\0\2\45\7\0\1\45"+
    "\4\0\5\45\1\u0122\3\45\1\u0123\20\45\26\0\2\45"+
    "\7\0\1\45\4\0\5\45\1\u0124\24\45\26\0\2\45"+
    "\7\0\1\45\4\0\5\45\1\u0125\24\45\26\0\2\45"+
    "\7\0\1\45\4\0\22\45\1\u0126\7\45\26\0\2\45"+
    "\7\0\1\45\4\0\16\45\1\u0127\13\45\26\0\2\45"+
    "\7\0\1\45\4\0\22\45\1\u0128\7\45\26\0\2\45"+
    "\7\0\1\45\4\0\24\45\1\u0129\5\45\26\0\2\45"+
    "\7\0\1\45\4\0\17\45\1\u012a\12\45\26\0\2\45"+
    "\7\0\1\45\4\0\22\45\1\u012b\7\45\26\0\2\45"+
    "\7\0\1\45\4\0\22\45\1\u012c\7\45\26\0\2\45"+
    "\7\0\1\45\4\0\11\45\1\u012d\20\45\26\0\2\45"+
    "\7\0\1\45\4\0\16\45\1\u012e\13\45\26\0\2\45"+
    "\7\0\1\45\4\0\23\45\1\u012f\6\45\26\0\2\45"+
    "\7\0\1\45\4\0\11\45\1\u0130\20\45\26\0\2\45"+
    "\7\0\1\45\4\0\3\45\1\u0131\26\45\5\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[12772];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\3\11\2\1\1\11\4\1\2\11"+
    "\3\1\1\11\2\1\1\11\1\1\2\11\25\1\4\11"+
    "\1\1\1\0\1\11\4\0\1\1\11\11\1\0\1\11"+
    "\1\0\3\1\1\11\2\1\1\11\1\1\1\11\2\1"+
    "\2\11\52\1\1\11\5\0\3\11\2\1\5\11\61\1"+
    "\1\0\1\11\2\0\41\1\2\0\110\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _PonyLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _PonyLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 129: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 130: break;
          case 3:
            { return BANG;
            }
          // fall through
          case 131: break;
          case 4:
            { return HASH;
            }
          // fall through
          case 132: break;
          case 5:
            { return REM;
            }
          // fall through
          case 133: break;
          case 6:
            { return AMP;
            }
          // fall through
          case 134: break;
          case 7:
            { return LP;
            }
          // fall through
          case 135: break;
          case 8:
            { return RP;
            }
          // fall through
          case 136: break;
          case 9:
            { return MUL;
            }
          // fall through
          case 137: break;
          case 10:
            { return ADD;
            }
          // fall through
          case 138: break;
          case 11:
            { return COMMA;
            }
          // fall through
          case 139: break;
          case 12:
            { return SUB;
            }
          // fall through
          case 140: break;
          case 13:
            { return DOT;
            }
          // fall through
          case 141: break;
          case 14:
            { return DIV;
            }
          // fall through
          case 142: break;
          case 15:
            { return DIGIT;
            }
          // fall through
          case 143: break;
          case 16:
            { return COLON;
            }
          // fall through
          case 144: break;
          case 17:
            { return SEMI;
            }
          // fall through
          case 145: break;
          case 18:
            { return LT;
            }
          // fall through
          case 146: break;
          case 19:
            { return EQUALS;
            }
          // fall through
          case 147: break;
          case 20:
            { return GT;
            }
          // fall through
          case 148: break;
          case 21:
            { return QM;
            }
          // fall through
          case 149: break;
          case 22:
            { return AT;
            }
          // fall through
          case 150: break;
          case 23:
            { return TYPE_ID;
            }
          // fall through
          case 151: break;
          case 24:
            { return LBK;
            }
          // fall through
          case 152: break;
          case 25:
            { return RBK;
            }
          // fall through
          case 153: break;
          case 26:
            { return CARET;
            }
          // fall through
          case 154: break;
          case 27:
            { return ID;
            }
          // fall through
          case 155: break;
          case 28:
            { return LBC;
            }
          // fall through
          case 156: break;
          case 29:
            { return PIPE;
            }
          // fall through
          case 157: break;
          case 30:
            { return RBC;
            }
          // fall through
          case 158: break;
          case 31:
            { return TILDE;
            }
          // fall through
          case 159: break;
          case 32:
            { return NEQ;
            }
          // fall through
          case 160: break;
          case 33:
            { return STRING;
            }
          // fall through
          case 161: break;
          case 34:
            { return MOD;
            }
          // fall through
          case 162: break;
          case 35:
            { return REM_PARTIAL;
            }
          // fall through
          case 163: break;
          case 36:
            { return REM_UNSAFE;
            }
          // fall through
          case 164: break;
          case 37:
            { return MUL_PARTIAL;
            }
          // fall through
          case 165: break;
          case 38:
            { return MUL_UNSAFE;
            }
          // fall through
          case 166: break;
          case 39:
            { return ADD_PARTIAL;
            }
          // fall through
          case 167: break;
          case 40:
            { return ADD_UNSAFE;
            }
          // fall through
          case 168: break;
          case 41:
            { return TYPE_ARROW;
            }
          // fall through
          case 169: break;
          case 42:
            { return SUB_PARTIAL;
            }
          // fall through
          case 170: break;
          case 43:
            { return SUB_UNSAFE;
            }
          // fall through
          case 171: break;
          case 44:
            { return CHAIN;
            }
          // fall through
          case 172: break;
          case 45:
            { return LINE_COMMENT;
            }
          // fall through
          case 173: break;
          case 46:
            { return DIV_PARTIAL;
            }
          // fall through
          case 174: break;
          case 47:
            { return DIV_UNSAFE;
            }
          // fall through
          case 175: break;
          case 48:
            { return ISA;
            }
          // fall through
          case 176: break;
          case 49:
            { return SHL;
            }
          // fall through
          case 177: break;
          case 50:
            { return LEQ;
            }
          // fall through
          case 178: break;
          case 51:
            { return LT_UNSAFE;
            }
          // fall through
          case 179: break;
          case 52:
            { return EQ;
            }
          // fall through
          case 180: break;
          case 53:
            { return ARROW;
            }
          // fall through
          case 181: break;
          case 54:
            { return GEQ;
            }
          // fall through
          case 182: break;
          case 55:
            { return SHR;
            }
          // fall through
          case 183: break;
          case 56:
            { return GT_UNSAFE;
            }
          // fall through
          case 184: break;
          case 57:
            { return RCVR;
            }
          // fall through
          case 185: break;
          case 58:
            { return NEWLINE;
            }
          // fall through
          case 186: break;
          case 59:
            { return AS;
            }
          // fall through
          case 187: break;
          case 60:
            { return BE;
            }
          // fall through
          case 188: break;
          case 61:
            { return DO;
            }
          // fall through
          case 189: break;
          case 62:
            { return IF;
            }
          // fall through
          case 190: break;
          case 63:
            { return IN;
            }
          // fall through
          case 191: break;
          case 64:
            { return IS;
            }
          // fall through
          case 192: break;
          case 65:
            { return OR;
            }
          // fall through
          case 193: break;
          case 66:
            { return NEQ_UNSAFE;
            }
          // fall through
          case 194: break;
          case 67:
            { return MOD_PARTIAL;
            }
          // fall through
          case 195: break;
          case 68:
            { return MOD_UNSAFE;
            }
          // fall through
          case 196: break;
          case 69:
            { return ELIPSIS;
            }
          // fall through
          case 197: break;
          case 70:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 198: break;
          case 71:
            { return SHL_UNSAFE;
            }
          // fall through
          case 199: break;
          case 72:
            { return LEQ_UNSAFE;
            }
          // fall through
          case 200: break;
          case 73:
            { return EQ_UNSAFE;
            }
          // fall through
          case 201: break;
          case 74:
            { return GEQ_UNSAFE;
            }
          // fall through
          case 202: break;
          case 75:
            { return SHR_UNSAFE;
            }
          // fall through
          case 203: break;
          case 76:
            { return AND;
            }
          // fall through
          case 204: break;
          case 77:
            { return BOX;
            }
          // fall through
          case 205: break;
          case 78:
            { return END;
            }
          // fall through
          case 206: break;
          case 79:
            { return FOR;
            }
          // fall through
          case 207: break;
          case 80:
            { return FUN;
            }
          // fall through
          case 208: break;
          case 81:
            { return ISO;
            }
          // fall through
          case 209: break;
          case 82:
            { return LET;
            }
          // fall through
          case 210: break;
          case 83:
            { return NEW;
            }
          // fall through
          case 211: break;
          case 84:
            { return NOT;
            }
          // fall through
          case 212: break;
          case 85:
            { return REF;
            }
          // fall through
          case 213: break;
          case 86:
            { return TAG;
            }
          // fall through
          case 214: break;
          case 87:
            { return TRN;
            }
          // fall through
          case 215: break;
          case 88:
            { return TRY;
            }
          // fall through
          case 216: break;
          case 89:
            { return USE;
            }
          // fall through
          case 217: break;
          case 90:
            { return VAL;
            }
          // fall through
          case 218: break;
          case 91:
            { return VAR;
            }
          // fall through
          case 219: break;
          case 92:
            { return XOR;
            }
          // fall through
          case 220: break;
          case 93:
            { return GENCAP;
            }
          // fall through
          case 221: break;
          case 94:
            { return ELSE;
            }
          // fall through
          case 222: break;
          case 95:
            { return ISNT;
            }
          // fall through
          case 223: break;
          case 96:
            { return THEN;
            }
          // fall through
          case 224: break;
          case 97:
            { return THIS;
            }
          // fall through
          case 225: break;
          case 98:
            { return TRUE;
            }
          // fall through
          case 226: break;
          case 99:
            { return TYPEDEF;
            }
          // fall through
          case 227: break;
          case 100:
            { return WITH;
            }
          // fall through
          case 228: break;
          case 101:
            { return SOURCELOC;
            }
          // fall through
          case 229: break;
          case 102:
            { return ACTOR;
            }
          // fall through
          case 230: break;
          case 103:
            { return BREAK;
            }
          // fall through
          case 231: break;
          case 104:
            { return CLASS;
            }
          // fall through
          case 232: break;
          case 105:
            { return EMBED;
            }
          // fall through
          case 233: break;
          case 106:
            { return ERROR;
            }
          // fall through
          case 234: break;
          case 107:
            { return FALSE;
            }
          // fall through
          case 235: break;
          case 108:
            { return IFDEF;
            }
          // fall through
          case 236: break;
          case 109:
            { return MATCH;
            }
          // fall through
          case 237: break;
          case 110:
            { return TRAIT;
            }
          // fall through
          case 238: break;
          case 111:
            { return UNTIL;
            }
          // fall through
          case 239: break;
          case 112:
            { return WHERE;
            }
          // fall through
          case 240: break;
          case 113:
            { return WHILE;
            }
          // fall through
          case 241: break;
          case 114:
            { return ELSEIF;
            }
          // fall through
          case 242: break;
          case 115:
            { return IFTYPE;
            }
          // fall through
          case 243: break;
          case 116:
            { return OBJECT;
            }
          // fall through
          case 244: break;
          case 117:
            { return REPEAT;
            }
          // fall through
          case 245: break;
          case 118:
            { return RETURN;
            }
          // fall through
          case 246: break;
          case 119:
            { return STRUCT;
            }
          // fall through
          case 247: break;
          case 120:
            { return CONSUME;
            }
          // fall through
          case 248: break;
          case 121:
            { return RECOVER;
            }
          // fall through
          case 249: break;
          case 122:
            { return CONTINUE;
            }
          // fall through
          case 250: break;
          case 123:
            { return DIGESTOF;
            }
          // fall through
          case 251: break;
          case 124:
            { return ADDRESSOF;
            }
          // fall through
          case 252: break;
          case 125:
            { return INTERFACE;
            }
          // fall through
          case 253: break;
          case 126:
            { return PRIMITIVE;
            }
          // fall through
          case 254: break;
          case 127:
            { return COMP_ERR;
            }
          // fall through
          case 255: break;
          case 128:
            { return COMP_INT;
            }
          // fall through
          case 256: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
