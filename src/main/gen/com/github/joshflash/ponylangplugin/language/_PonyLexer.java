// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _PonyLexer.flex

package com.github.joshflash.ponylangplugin.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.joshflash.ponylangplugin.language.psi.PonyTypes.*;


public class _PonyLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\4\2\22\0\1\1\1\3\1\4\1\5"+
    "\1\0\1\6\1\7\1\0\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\11\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\32\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\0\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\57\1\70\1\71"+
    "\1\72\1\73\6\0\1\2\32\0\1\1\u01df\0\1\1"+
    "\177\0\13\1\35\0\2\2\5\0\1\1\57\0\1\1"+
    "\240\0\1\1\377\0\u0100\74";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\25\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\0\1\41\4\0\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\0"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\4\33\1\74\1\75\5\33\1\76\7\33\1\77\1\100"+
    "\1\101\5\33\1\102\15\33\1\103\5\0\1\104\1\105"+
    "\1\106\1\0\1\107\1\110\1\111\1\112\1\113\3\33"+
    "\1\114\1\115\7\33\1\116\2\33\1\117\1\120\4\33"+
    "\1\121\1\122\1\33\1\123\1\124\3\33\1\125\3\33"+
    "\1\126\3\33\1\127\1\33\1\130\2\33\1\131\1\132"+
    "\1\133\3\33\1\134\1\0\1\135\2\0\1\55\11\33"+
    "\1\136\6\33\1\137\10\33\1\140\1\141\1\33\1\142"+
    "\1\143\3\33\1\144\2\0\1\145\1\146\1\33\1\147"+
    "\1\150\5\33\1\151\1\152\1\153\1\154\2\33\1\155"+
    "\7\33\1\156\1\157\1\160\1\161\5\33\1\162\1\163"+
    "\2\33\1\164\2\33\1\165\1\166\1\167\2\33\1\170"+
    "\3\33\1\171\1\33\1\172\2\33\1\173\1\174\2\33"+
    "\1\175\2\33\1\176\1\177\6\33\1\200\4\33\1\201";

  private static int [] zzUnpackAction() {
    int [] result = new int[308];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\75"+
    "\0\75\0\75\0\u01ab\0\u01e8\0\75\0\u0225\0\u0262\0\u029f"+
    "\0\u02dc\0\75\0\75\0\u0319\0\u0356\0\u0393\0\75\0\u03d0"+
    "\0\u040d\0\75\0\75\0\75\0\u044a\0\u0487\0\u04c4\0\u0501"+
    "\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9"+
    "\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857\0\u0894\0\u08d1"+
    "\0\u090e\0\75\0\75\0\75\0\75\0\u094b\0\364\0\75"+
    "\0\u0988\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c\0\75\0\75\0\75"+
    "\0\75\0\75\0\75\0\75\0\75\0\75\0\u0ab9\0\75"+
    "\0\u0af6\0\u0b33\0\75\0\75\0\75\0\u0b70\0\u0bad\0\75"+
    "\0\u0bea\0\75\0\u0c27\0\u0c64\0\75\0\75\0\u040d\0\u0ca1"+
    "\0\u0cde\0\u0d1b\0\u0d58\0\u05f5\0\u05f5\0\u0d95\0\u0dd2\0\u0e0f"+
    "\0\u0e4c\0\u0e89\0\u05f5\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba"+
    "\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2"+
    "\0\u11df\0\u121c\0\u05f5\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d"+
    "\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u1535"+
    "\0\75\0\u1572\0\u15af\0\u15ec\0\u1629\0\u1666\0\75\0\75"+
    "\0\75\0\u16a3\0\75\0\75\0\75\0\75\0\75\0\u16e0"+
    "\0\u171d\0\u175a\0\u05f5\0\u05f5\0\u1797\0\u17d4\0\u1811\0\u184e"+
    "\0\u188b\0\u18c8\0\u1905\0\u05f5\0\u1942\0\u197f\0\u05f5\0\u05f5"+
    "\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\u05f5\0\u05f5\0\u1ab0\0\u1aed"+
    "\0\u05f5\0\u1b2a\0\u1b67\0\u1ba4\0\u05f5\0\u1be1\0\u1c1e\0\u1c5b"+
    "\0\u05f5\0\u1c98\0\u1cd5\0\u1d12\0\u05f5\0\u1d4f\0\u05f5\0\u1d8c"+
    "\0\u1dc9\0\u05f5\0\u05f5\0\u05f5\0\u1e06\0\u1e43\0\u1e80\0\u05f5"+
    "\0\u1ebd\0\75\0\u1efa\0\u1f37\0\75\0\u1f74\0\u1fb1\0\u1fee"+
    "\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c\0\u2199\0\u21d6"+
    "\0\u2213\0\u2250\0\u228d\0\u22ca\0\u2307\0\u05f5\0\u2344\0\u2381"+
    "\0\u23be\0\u23fb\0\u2438\0\u2475\0\u24b2\0\u24ef\0\u05f5\0\u05f5"+
    "\0\u252c\0\u05f5\0\u05f5\0\u2569\0\u25a6\0\u25e3\0\u05f5\0\u2620"+
    "\0\u265d\0\u05f5\0\u05f5\0\u269a\0\u05f5\0\u05f5\0\u26d7\0\u2714"+
    "\0\u2751\0\u278e\0\u27cb\0\u05f5\0\u05f5\0\u05f5\0\u05f5\0\u2808"+
    "\0\u2845\0\u05f5\0\u2882\0\u28bf\0\u28fc\0\u2939\0\u2976\0\u29b3"+
    "\0\u29f0\0\u05f5\0\u05f5\0\u05f5\0\u05f5\0\u2a2d\0\u2a6a\0\u2aa7"+
    "\0\u2ae4\0\u2b21\0\u05f5\0\u05f5\0\u2b5e\0\u2b9b\0\u05f5\0\u2bd8"+
    "\0\u2c15\0\u05f5\0\u05f5\0\u05f5\0\u2c52\0\u2c8f\0\u05f5\0\u2ccc"+
    "\0\u2d09\0\u2d46\0\u05f5\0\u2d83\0\u05f5\0\u2dc0\0\u2dfd\0\u05f5"+
    "\0\u05f5\0\u2e3a\0\u2e77\0\u05f5\0\u2eb4\0\u2ef1\0\u05f5\0\u05f5"+
    "\0\u2f2e\0\u2f6b\0\u2fa8\0\u2fe5\0\u3022\0\u305f\0\u05f5\0\u309c"+
    "\0\u30d9\0\u3116\0\u3153\0\u05f5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[308];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\2\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\2\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\2\44\1\45\2\44\1\46\1\47"+
    "\1\50\1\51\1\52\1\44\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\44\1\62\1\63\1\64\1\65"+
    "\1\2\76\0\2\3\117\0\1\66\47\0\4\67\1\70"+
    "\26\67\1\71\41\67\37\0\1\72\20\0\1\73\1\74"+
    "\21\0\1\75\20\0\1\76\43\0\1\77\30\0\1\100"+
    "\43\0\1\101\30\0\1\102\43\0\1\103\27\0\1\104"+
    "\1\105\43\0\1\106\17\0\1\107\7\0\1\110\60\0"+
    "\1\111\4\0\1\112\7\0\1\113\43\0\1\114\21\0"+
    "\2\21\75\0\1\115\1\0\1\116\1\117\45\0\1\120"+
    "\26\0\1\121\1\122\73\0\1\123\1\124\44\0\1\125"+
    "\71\0\1\126\24\0\2\127\7\0\1\127\4\0\32\127"+
    "\25\0\2\44\7\0\1\44\4\0\1\130\31\44\25\0"+
    "\2\44\7\0\1\44\4\0\3\44\1\131\1\132\11\44"+
    "\1\133\4\44\1\134\6\44\25\0\2\44\7\0\1\44"+
    "\4\0\5\44\1\135\11\44\1\136\2\44\1\137\7\44"+
    "\25\0\2\44\7\0\1\44\4\0\14\44\1\140\2\44"+
    "\1\141\12\44\25\0\2\44\7\0\1\44\4\0\11\44"+
    "\1\142\5\44\1\143\12\44\25\0\2\44\7\0\1\44"+
    "\4\0\14\44\1\144\1\145\1\146\3\44\1\147\7\44"+
    "\25\0\2\44\7\0\1\44\4\0\1\44\1\150\15\44"+
    "\1\151\5\44\1\152\4\44\25\0\2\44\7\0\1\44"+
    "\4\0\32\44\25\0\2\44\7\0\1\44\4\0\6\44"+
    "\1\153\7\44\1\154\4\44\1\155\6\44\25\0\2\44"+
    "\7\0\1\44\4\0\5\44\1\156\24\44\25\0\2\44"+
    "\7\0\1\44\4\0\1\44\1\157\30\44\25\0\2\44"+
    "\7\0\1\44\4\0\5\44\1\160\11\44\1\161\12\44"+
    "\25\0\2\44\7\0\1\44\4\0\2\44\1\162\17\44"+
    "\1\163\7\44\25\0\2\44\7\0\1\44\4\0\22\44"+
    "\1\164\7\44\25\0\2\44\7\0\1\44\4\0\5\44"+
    "\1\165\24\44\25\0\2\44\7\0\1\44\4\0\24\44"+
    "\1\166\5\44\25\0\2\44\7\0\1\44\4\0\1\44"+
    "\1\167\6\44\1\170\11\44\1\171\6\44\1\172\25\0"+
    "\2\44\7\0\1\44\4\0\16\44\1\173\4\44\1\174"+
    "\6\44\25\0\2\44\7\0\1\44\4\0\1\44\1\175"+
    "\30\44\25\0\2\44\7\0\1\44\4\0\10\44\1\176"+
    "\1\177\20\44\25\0\2\44\7\0\1\44\4\0\17\44"+
    "\1\200\12\44\100\0\1\201\5\0\1\67\13\0\1\67"+
    "\12\0\1\67\3\0\2\67\2\0\2\67\7\0\1\67"+
    "\3\0\1\67\1\0\1\67\1\0\1\67\62\0\1\202"+
    "\1\0\1\203\63\0\1\204\74\0\1\205\2\0\1\206"+
    "\55\0\1\207\43\0\1\210\17\0\1\211\56\0\12\111"+
    "\1\212\62\111\2\112\1\0\71\112\74\0\1\213\74\0"+
    "\1\214\74\0\1\215\74\0\1\216\74\0\1\217\21\0"+
    "\2\44\7\0\1\44\4\0\14\44\1\220\15\44\25\0"+
    "\2\44\7\0\1\44\4\0\24\44\1\221\5\44\25\0"+
    "\2\44\7\0\1\44\4\0\4\44\1\222\25\44\25\0"+
    "\2\44\7\0\1\44\4\0\4\44\1\223\25\44\25\0"+
    "\2\44\7\0\1\44\4\0\30\44\1\224\1\44\25\0"+
    "\2\44\7\0\1\44\4\0\5\44\1\225\24\44\25\0"+
    "\2\44\7\0\1\44\4\0\1\44\1\226\30\44\25\0"+
    "\2\44\7\0\1\44\4\0\15\44\1\227\1\230\13\44"+
    "\25\0\2\44\7\0\1\44\4\0\7\44\1\231\22\44"+
    "\25\0\2\44\7\0\1\44\4\0\23\44\1\232\6\44"+
    "\25\0\2\44\7\0\1\44\4\0\2\44\1\233\27\44"+
    "\25\0\2\44\7\0\1\44\4\0\4\44\1\234\25\44"+
    "\25\0\2\44\7\0\1\44\4\0\22\44\1\235\7\44"+
    "\25\0\2\44\7\0\1\44\4\0\14\44\1\236\15\44"+
    "\25\0\2\44\7\0\1\44\4\0\22\44\1\237\7\44"+
    "\25\0\2\44\7\0\1\44\4\0\16\44\1\240\13\44"+
    "\25\0\2\44\7\0\1\44\4\0\4\44\1\241\17\44"+
    "\1\242\5\44\25\0\2\44\7\0\1\44\4\0\24\44"+
    "\1\243\5\44\25\0\2\44\7\0\1\44\4\0\16\44"+
    "\1\244\1\245\12\44\25\0\2\44\7\0\1\44\4\0"+
    "\24\44\1\246\5\44\25\0\2\44\7\0\1\44\4\0"+
    "\24\44\1\247\5\44\25\0\2\44\7\0\1\44\4\0"+
    "\27\44\1\250\2\44\25\0\2\44\7\0\1\44\4\0"+
    "\24\44\1\251\5\44\25\0\2\44\7\0\1\44\4\0"+
    "\12\44\1\252\17\44\25\0\2\44\7\0\1\44\4\0"+
    "\11\44\1\253\20\44\25\0\2\44\7\0\1\44\4\0"+
    "\3\44\1\254\2\44\1\255\11\44\1\256\3\44\1\257"+
    "\5\44\25\0\2\44\7\0\1\44\4\0\22\44\1\260"+
    "\7\44\25\0\2\44\7\0\1\44\4\0\7\44\1\261"+
    "\22\44\25\0\2\44\7\0\1\44\4\0\5\44\1\262"+
    "\3\44\1\263\20\44\25\0\2\44\7\0\1\44\4\0"+
    "\1\44\1\264\14\44\1\265\6\44\1\266\3\44\1\267"+
    "\25\0\2\44\7\0\1\44\4\0\20\44\1\270\11\44"+
    "\25\0\2\44\7\0\1\44\4\0\24\44\1\271\5\44"+
    "\25\0\2\44\7\0\1\44\4\0\5\44\1\272\24\44"+
    "\25\0\2\44\7\0\1\44\4\0\14\44\1\273\5\44"+
    "\1\274\7\44\25\0\2\44\7\0\1\44\4\0\5\44"+
    "\1\275\3\44\1\276\20\44\25\0\2\44\7\0\1\44"+
    "\4\0\24\44\1\277\5\44\25\0\2\44\7\0\1\44"+
    "\4\0\22\44\1\300\7\44\54\0\1\301\114\0\1\302"+
    "\44\0\1\303\111\0\1\303\57\0\1\304\35\0\12\111"+
    "\1\212\4\111\1\305\55\111\20\0\2\44\7\0\1\44"+
    "\4\0\17\44\1\306\12\44\25\0\2\44\7\0\1\44"+
    "\4\0\17\44\1\307\12\44\25\0\2\44\7\0\1\44"+
    "\4\0\22\44\1\310\7\44\25\0\2\44\7\0\1\44"+
    "\4\0\1\44\1\311\30\44\25\0\2\44\7\0\1\44"+
    "\4\0\23\44\1\312\6\44\25\0\2\44\7\0\1\44"+
    "\4\0\20\44\1\313\11\44\25\0\2\44\7\0\1\44"+
    "\4\0\23\44\1\314\1\315\5\44\25\0\2\44\7\0"+
    "\1\44\4\0\5\44\1\316\24\44\25\0\2\44\7\0"+
    "\1\44\4\0\5\44\1\317\24\44\25\0\2\44\7\0"+
    "\1\44\4\0\5\44\1\320\24\44\25\0\2\44\7\0"+
    "\1\44\4\0\17\44\1\321\12\44\25\0\2\44\7\0"+
    "\1\44\4\0\23\44\1\322\6\44\25\0\2\44\7\0"+
    "\1\44\4\0\5\44\1\323\24\44\25\0\2\44\7\0"+
    "\1\44\4\0\31\44\1\324\25\0\2\44\7\0\1\44"+
    "\4\0\5\44\1\325\24\44\25\0\2\44\7\0\1\44"+
    "\4\0\24\44\1\326\5\44\25\0\2\44\7\0\1\44"+
    "\4\0\3\44\1\327\26\44\25\0\2\44\7\0\1\44"+
    "\4\0\14\44\1\330\15\44\25\0\2\44\7\0\1\44"+
    "\4\0\5\44\1\331\24\44\25\0\2\44\7\0\1\44"+
    "\4\0\15\44\1\332\14\44\25\0\2\44\7\0\1\44"+
    "\4\0\17\44\1\333\12\44\25\0\2\44\7\0\1\44"+
    "\4\0\5\44\1\334\24\44\25\0\2\44\7\0\1\44"+
    "\4\0\25\44\1\335\4\44\25\0\2\44\7\0\1\44"+
    "\4\0\25\44\1\336\4\44\25\0\2\44\7\0\1\44"+
    "\4\0\16\44\1\337\13\44\25\0\2\44\7\0\1\44"+
    "\4\0\23\44\1\340\6\44\25\0\2\44\7\0\1\44"+
    "\4\0\11\44\1\341\20\44\25\0\2\44\7\0\1\44"+
    "\4\0\5\44\1\342\24\44\25\0\2\44\7\0\1\44"+
    "\4\0\5\44\1\343\24\44\25\0\2\44\7\0\1\44"+
    "\4\0\11\44\1\344\20\44\25\0\2\44\7\0\1\44"+
    "\4\0\22\44\1\345\7\44\25\0\2\44\7\0\1\44"+
    "\4\0\14\44\1\346\15\44\25\0\2\44\7\0\1\44"+
    "\4\0\10\44\1\347\21\44\44\0\1\350\77\0\1\302"+
    "\112\0\1\351\34\0\2\44\7\0\1\44\4\0\3\44"+
    "\1\352\26\44\25\0\2\44\7\0\1\44\4\0\22\44"+
    "\1\353\7\44\25\0\2\44\7\0\1\44\4\0\5\44"+
    "\1\354\24\44\25\0\2\44\7\0\1\44\4\0\13\44"+
    "\1\355\16\44\25\0\2\44\7\0\1\44\4\0\23\44"+
    "\1\356\6\44\25\0\2\44\7\0\1\44\4\0\11\44"+
    "\1\357\20\44\25\0\2\44\7\0\1\44\4\0\25\44"+
    "\1\360\4\44\25\0\2\44\7\0\1\44\4\0\11\44"+
    "\1\361\20\44\25\0\2\44\7\0\1\44\4\0\23\44"+
    "\1\362\6\44\25\0\2\44\7\0\1\44\4\0\11\44"+
    "\1\363\20\44\25\0\2\44\7\0\1\44\4\0\4\44"+
    "\1\364\25\44\25\0\2\44\7\0\1\44\4\0\22\44"+
    "\1\365\7\44\25\0\2\44\7\0\1\44\4\0\5\44"+
    "\1\366\24\44\25\0\2\44\7\0\1\44\4\0\6\44"+
    "\1\367\23\44\25\0\2\44\7\0\1\44\4\0\20\44"+
    "\1\370\11\44\25\0\2\44\7\0\1\44\4\0\22\44"+
    "\1\371\7\44\25\0\2\44\7\0\1\44\4\0\10\44"+
    "\1\372\21\44\25\0\2\44\7\0\1\44\4\0\11\44"+
    "\1\373\20\44\25\0\2\44\7\0\1\44\4\0\3\44"+
    "\1\374\26\44\25\0\2\44\7\0\1\44\4\0\11\44"+
    "\1\375\20\44\25\0\2\44\7\0\1\44\4\0\26\44"+
    "\1\376\3\44\25\0\2\44\7\0\1\44\4\0\1\44"+
    "\1\377\30\44\25\0\2\44\7\0\1\44\4\0\22\44"+
    "\1\u0100\7\44\25\0\2\44\7\0\1\44\4\0\3\44"+
    "\1\u0101\26\44\25\0\2\44\7\0\1\44\4\0\24\44"+
    "\1\u0102\5\44\25\0\2\44\7\0\1\44\4\0\14\44"+
    "\1\u0103\15\44\25\0\2\44\7\0\1\44\4\0\5\44"+
    "\1\u0104\24\44\25\0\2\44\7\0\1\44\4\0\5\44"+
    "\1\u0105\24\44\66\0\1\302\56\0\1\302\51\0\2\44"+
    "\7\0\1\44\4\0\23\44\1\u0106\6\44\25\0\2\44"+
    "\7\0\1\44\4\0\14\44\1\u0107\15\44\25\0\2\44"+
    "\7\0\1\44\4\0\15\44\1\u0108\14\44\25\0\2\44"+
    "\7\0\1\44\4\0\16\44\1\u0109\13\44\25\0\2\44"+
    "\7\0\1\44\4\0\24\44\1\u010a\5\44\25\0\2\44"+
    "\7\0\1\44\4\0\6\44\1\u010b\23\44\25\0\2\44"+
    "\7\0\1\44\4\0\5\44\1\u010c\24\44\25\0\2\44"+
    "\7\0\1\44\4\0\6\44\1\u010d\23\44\25\0\2\44"+
    "\7\0\1\44\4\0\16\44\1\u010e\13\44\25\0\2\44"+
    "\7\0\1\44\4\0\24\44\1\u010f\5\44\25\0\2\44"+
    "\7\0\1\44\4\0\24\44\1\u0110\5\44\25\0\2\44"+
    "\7\0\1\44\4\0\5\44\1\u0111\24\44\25\0\2\44"+
    "\7\0\1\44\4\0\24\44\1\u0112\5\44\25\0\2\44"+
    "\7\0\1\44\4\0\16\44\1\u0113\13\44\25\0\2\44"+
    "\7\0\1\44\4\0\24\44\1\u0114\5\44\25\0\2\44"+
    "\7\0\1\44\4\0\23\44\1\u0115\6\44\25\0\2\44"+
    "\7\0\1\44\4\0\5\44\1\u0116\24\44\25\0\2\44"+
    "\7\0\1\44\4\0\5\44\1\u0117\24\44\25\0\2\44"+
    "\7\0\1\44\4\0\25\44\1\u0118\4\44\25\0\2\44"+
    "\7\0\1\44\4\0\17\44\1\u0119\12\44\25\0\2\44"+
    "\7\0\1\44\4\0\1\44\1\u011a\30\44\25\0\2\44"+
    "\7\0\1\44\4\0\5\44\1\u011b\24\44\25\0\2\44"+
    "\7\0\1\44\4\0\11\44\1\u011c\20\44\25\0\2\44"+
    "\7\0\1\44\4\0\22\44\1\u011d\7\44\25\0\2\44"+
    "\7\0\1\44\4\0\17\44\1\u011e\12\44\25\0\2\44"+
    "\7\0\1\44\4\0\1\u011f\31\44\25\0\2\44\7\0"+
    "\1\44\4\0\5\44\1\u0120\24\44\25\0\2\44\7\0"+
    "\1\44\4\0\6\44\1\u0121\23\44\25\0\2\44\7\0"+
    "\1\44\4\0\3\44\1\u0122\26\44\25\0\2\44\7\0"+
    "\1\44\4\0\26\44\1\u0123\3\44\25\0\2\44\7\0"+
    "\1\44\4\0\6\44\1\u0124\23\44\25\0\2\44\7\0"+
    "\1\44\4\0\5\44\1\u0125\3\44\1\u0126\20\44\25\0"+
    "\2\44\7\0\1\44\4\0\5\44\1\u0127\24\44\25\0"+
    "\2\44\7\0\1\44\4\0\5\44\1\u0128\24\44\25\0"+
    "\2\44\7\0\1\44\4\0\22\44\1\u0129\7\44\25\0"+
    "\2\44\7\0\1\44\4\0\16\44\1\u012a\13\44\25\0"+
    "\2\44\7\0\1\44\4\0\22\44\1\u012b\7\44\25\0"+
    "\2\44\7\0\1\44\4\0\24\44\1\u012c\5\44\25\0"+
    "\2\44\7\0\1\44\4\0\17\44\1\u012d\12\44\25\0"+
    "\2\44\7\0\1\44\4\0\22\44\1\u012e\7\44\25\0"+
    "\2\44\7\0\1\44\4\0\22\44\1\u012f\7\44\25\0"+
    "\2\44\7\0\1\44\4\0\11\44\1\u0130\20\44\25\0"+
    "\2\44\7\0\1\44\4\0\16\44\1\u0131\13\44\25\0"+
    "\2\44\7\0\1\44\4\0\23\44\1\u0132\6\44\25\0"+
    "\2\44\7\0\1\44\4\0\11\44\1\u0133\20\44\25\0"+
    "\2\44\7\0\1\44\4\0\3\44\1\u0134\26\44\5\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[12688];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\3\11\2\1\1\11\4\1\2\11"+
    "\3\1\1\11\2\1\3\11\25\1\4\11\1\1\1\0"+
    "\1\11\4\0\1\1\11\11\1\0\1\11\2\1\3\11"+
    "\2\1\1\11\1\1\1\11\2\1\2\11\52\1\1\11"+
    "\5\0\3\11\1\0\5\11\61\1\1\0\1\11\2\0"+
    "\1\11\42\1\2\0\113\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[308];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _PonyLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _PonyLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 130: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 131: break;
          case 3:
            { return BANG;
            }
          // fall through
          case 132: break;
          case 4:
            { return HASH;
            }
          // fall through
          case 133: break;
          case 5:
            { return REM;
            }
          // fall through
          case 134: break;
          case 6:
            { return AMP;
            }
          // fall through
          case 135: break;
          case 7:
            { return LP;
            }
          // fall through
          case 136: break;
          case 8:
            { return RP;
            }
          // fall through
          case 137: break;
          case 9:
            { return MUL;
            }
          // fall through
          case 138: break;
          case 10:
            { return ADD;
            }
          // fall through
          case 139: break;
          case 11:
            { return COMMA;
            }
          // fall through
          case 140: break;
          case 12:
            { return SUB;
            }
          // fall through
          case 141: break;
          case 13:
            { return DOT;
            }
          // fall through
          case 142: break;
          case 14:
            { return DIV;
            }
          // fall through
          case 143: break;
          case 15:
            { return DIGIT;
            }
          // fall through
          case 144: break;
          case 16:
            { return COLON;
            }
          // fall through
          case 145: break;
          case 17:
            { return SEMI;
            }
          // fall through
          case 146: break;
          case 18:
            { return LT;
            }
          // fall through
          case 147: break;
          case 19:
            { return EQUALS;
            }
          // fall through
          case 148: break;
          case 20:
            { return GT;
            }
          // fall through
          case 149: break;
          case 21:
            { return QM;
            }
          // fall through
          case 150: break;
          case 22:
            { return AT;
            }
          // fall through
          case 151: break;
          case 23:
            { return GENERIC_ID;
            }
          // fall through
          case 152: break;
          case 24:
            { return LBK;
            }
          // fall through
          case 153: break;
          case 25:
            { return RBK;
            }
          // fall through
          case 154: break;
          case 26:
            { return CARET;
            }
          // fall through
          case 155: break;
          case 27:
            { return ID;
            }
          // fall through
          case 156: break;
          case 28:
            { return LBC;
            }
          // fall through
          case 157: break;
          case 29:
            { return PIPE;
            }
          // fall through
          case 158: break;
          case 30:
            { return RBC;
            }
          // fall through
          case 159: break;
          case 31:
            { return TILDE;
            }
          // fall through
          case 160: break;
          case 32:
            { return NEQ;
            }
          // fall through
          case 161: break;
          case 33:
            { return STRING;
            }
          // fall through
          case 162: break;
          case 34:
            { return MOD;
            }
          // fall through
          case 163: break;
          case 35:
            { return REM_PARTIAL;
            }
          // fall through
          case 164: break;
          case 36:
            { return REM_UNSAFE;
            }
          // fall through
          case 165: break;
          case 37:
            { return MUL_PARTIAL;
            }
          // fall through
          case 166: break;
          case 38:
            { return MUL_UNSAFE;
            }
          // fall through
          case 167: break;
          case 39:
            { return ADD_PARTIAL;
            }
          // fall through
          case 168: break;
          case 40:
            { return ADD_UNSAFE;
            }
          // fall through
          case 169: break;
          case 41:
            { return TYPE_ARROW;
            }
          // fall through
          case 170: break;
          case 42:
            { return SUB_PARTIAL;
            }
          // fall through
          case 171: break;
          case 43:
            { return SUB_UNSAFE;
            }
          // fall through
          case 172: break;
          case 44:
            { return CHAIN;
            }
          // fall through
          case 173: break;
          case 45:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 174: break;
          case 46:
            { return LINE_COMMENT;
            }
          // fall through
          case 175: break;
          case 47:
            { return DIV_PARTIAL;
            }
          // fall through
          case 176: break;
          case 48:
            { return DIV_UNSAFE;
            }
          // fall through
          case 177: break;
          case 49:
            { return ISA;
            }
          // fall through
          case 178: break;
          case 50:
            { return SHL;
            }
          // fall through
          case 179: break;
          case 51:
            { return LEQ;
            }
          // fall through
          case 180: break;
          case 52:
            { return LT_UNSAFE;
            }
          // fall through
          case 181: break;
          case 53:
            { return EQ;
            }
          // fall through
          case 182: break;
          case 54:
            { return ARROW;
            }
          // fall through
          case 183: break;
          case 55:
            { return GEQ;
            }
          // fall through
          case 184: break;
          case 56:
            { return SHR;
            }
          // fall through
          case 185: break;
          case 57:
            { return GT_UNSAFE;
            }
          // fall through
          case 186: break;
          case 58:
            { return RCVR;
            }
          // fall through
          case 187: break;
          case 59:
            { return TYPE_ID;
            }
          // fall through
          case 188: break;
          case 60:
            { return AS;
            }
          // fall through
          case 189: break;
          case 61:
            { return BE;
            }
          // fall through
          case 190: break;
          case 62:
            { return DO;
            }
          // fall through
          case 191: break;
          case 63:
            { return IF;
            }
          // fall through
          case 192: break;
          case 64:
            { return IN;
            }
          // fall through
          case 193: break;
          case 65:
            { return IS;
            }
          // fall through
          case 194: break;
          case 66:
            { return OR;
            }
          // fall through
          case 195: break;
          case 67:
            { return NEQ_UNSAFE;
            }
          // fall through
          case 196: break;
          case 68:
            { return MOD_PARTIAL;
            }
          // fall through
          case 197: break;
          case 69:
            { return MOD_UNSAFE;
            }
          // fall through
          case 198: break;
          case 70:
            { return ELIPSIS;
            }
          // fall through
          case 199: break;
          case 71:
            { return SHL_UNSAFE;
            }
          // fall through
          case 200: break;
          case 72:
            { return LEQ_UNSAFE;
            }
          // fall through
          case 201: break;
          case 73:
            { return EQ_UNSAFE;
            }
          // fall through
          case 202: break;
          case 74:
            { return GEQ_UNSAFE;
            }
          // fall through
          case 203: break;
          case 75:
            { return SHR_UNSAFE;
            }
          // fall through
          case 204: break;
          case 76:
            { return AND;
            }
          // fall through
          case 205: break;
          case 77:
            { return BOX;
            }
          // fall through
          case 206: break;
          case 78:
            { return END;
            }
          // fall through
          case 207: break;
          case 79:
            { return FOR;
            }
          // fall through
          case 208: break;
          case 80:
            { return FUN;
            }
          // fall through
          case 209: break;
          case 81:
            { return ISO;
            }
          // fall through
          case 210: break;
          case 82:
            { return LET;
            }
          // fall through
          case 211: break;
          case 83:
            { return NEW;
            }
          // fall through
          case 212: break;
          case 84:
            { return NOT;
            }
          // fall through
          case 213: break;
          case 85:
            { return REF;
            }
          // fall through
          case 214: break;
          case 86:
            { return TAG;
            }
          // fall through
          case 215: break;
          case 87:
            { return TRN;
            }
          // fall through
          case 216: break;
          case 88:
            { return TRY;
            }
          // fall through
          case 217: break;
          case 89:
            { return USE;
            }
          // fall through
          case 218: break;
          case 90:
            { return VAL;
            }
          // fall through
          case 219: break;
          case 91:
            { return VAR;
            }
          // fall through
          case 220: break;
          case 92:
            { return XOR;
            }
          // fall through
          case 221: break;
          case 93:
            { return GENCAP;
            }
          // fall through
          case 222: break;
          case 94:
            { return ELSE;
            }
          // fall through
          case 223: break;
          case 95:
            { return ISNT;
            }
          // fall through
          case 224: break;
          case 96:
            { return THEN;
            }
          // fall through
          case 225: break;
          case 97:
            { return THIS;
            }
          // fall through
          case 226: break;
          case 98:
            { return TRUE;
            }
          // fall through
          case 227: break;
          case 99:
            { return TYPEDEF;
            }
          // fall through
          case 228: break;
          case 100:
            { return WITH;
            }
          // fall through
          case 229: break;
          case 101:
            { return SOURCELOC;
            }
          // fall through
          case 230: break;
          case 102:
            { return ACTOR;
            }
          // fall through
          case 231: break;
          case 103:
            { return BREAK;
            }
          // fall through
          case 232: break;
          case 104:
            { return CLASS;
            }
          // fall through
          case 233: break;
          case 105:
            { return EMBED;
            }
          // fall through
          case 234: break;
          case 106:
            { return ERROR;
            }
          // fall through
          case 235: break;
          case 107:
            { return FALSE;
            }
          // fall through
          case 236: break;
          case 108:
            { return IFDEF;
            }
          // fall through
          case 237: break;
          case 109:
            { return MATCH;
            }
          // fall through
          case 238: break;
          case 110:
            { return TRAIT;
            }
          // fall through
          case 239: break;
          case 111:
            { return UNTIL;
            }
          // fall through
          case 240: break;
          case 112:
            { return WHERE;
            }
          // fall through
          case 241: break;
          case 113:
            { return WHILE;
            }
          // fall through
          case 242: break;
          case 114:
            { return ELSEIF;
            }
          // fall through
          case 243: break;
          case 115:
            { return IFTYPE;
            }
          // fall through
          case 244: break;
          case 116:
            { return OBJECT;
            }
          // fall through
          case 245: break;
          case 117:
            { return REPEAT;
            }
          // fall through
          case 246: break;
          case 118:
            { return RETURN;
            }
          // fall through
          case 247: break;
          case 119:
            { return STRUCT;
            }
          // fall through
          case 248: break;
          case 120:
            { return CONSUME;
            }
          // fall through
          case 249: break;
          case 121:
            { return NEWLINE;
            }
          // fall through
          case 250: break;
          case 122:
            { return RECOVER;
            }
          // fall through
          case 251: break;
          case 123:
            { return CONTINUE;
            }
          // fall through
          case 252: break;
          case 124:
            { return DIGESTOF;
            }
          // fall through
          case 253: break;
          case 125:
            { return ADDRESSOF;
            }
          // fall through
          case 254: break;
          case 126:
            { return INTERFACE;
            }
          // fall through
          case 255: break;
          case 127:
            { return PRIMITIVE;
            }
          // fall through
          case 256: break;
          case 128:
            { return COMP_ERR;
            }
          // fall through
          case 257: break;
          case 129:
            { return COMP_INT;
            }
          // fall through
          case 258: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
